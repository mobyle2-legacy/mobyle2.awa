{
    "type": "program", 
    "name": "blast2taxoclass", 
    "version": "1.0", 
    "title": "blast2taxoclass", 
    "description": "<text lang=\"en\">Blast filtering with taxonomic hierarchy information</text> </description>", 
    "authors": "C. Maufrais</authors>", 
    "references": [
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Larget, B. and D. Simon (1999). Markov chain Monte Carlo algorithms for the Bayesian analysis of phylogenetic trees. Molecular Biology and Evolution 16:750-759.</reference>"
        }, 
        {
            "value": "Simon, D. and B. Larget. 1998. Bayesian analysis in molecular biology and evolution (BAMBE), version 1.01 beta. Department of Mathematics and Computer Science, Duquesne University.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Gascuel O., 1997, BIONJ: an improved version of the NJ algorithm based on a simple model of sequence data, Molecular Biology and Evolution 14(7):685-695</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer,Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.</reference>"
        }
    ], 
    "sourcelinks": [
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net/download", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net/download", 
        "https://projets.pasteur.fr/projects/list_files/blast2usa"
    ], 
    "homepagelinks": [
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net", 
        "https://projets.pasteur.fr/projects/show/blast2usa"
    ], 
    "doclinks": [
        "http://bioweb2.pasteur.fr/docs/EMBOSS/abiview.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/antigenic.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranambig.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/banana.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/biosed.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", 
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html"
    ], 
    "mobyle_cats": [
        "display", 
        "alignment:formatter", 
        "sequence:protein:motifs", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "phylogeny:bayesian", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "phylogeny:distance", 
        "sequence:edit", 
        "alignment:pairwise", 
        "database:search:filter", 
        "database:search:homology", 
        "database:search:display", 
        "database:search:filter"
    ], 
    "command": "blast2taxoclass", 
    "inputs": {
        "parameters": {
            "infile": {
                "ismandatory": true, 
                "prompt": "Blast output file", 
                "type": {
                    "datatype_class": "BlastTextReport", 
                    "datatype_superclass": "Report"
                }, 
                "format": {
                    "perl": "\" -i $value\"", 
                    "python": "\" -i \" + str(value)"
                }
            }, 
            "blastfilter": {
                "prompt": "Find taxonomic classification of:", 
                "type": {
                    "datatype_class": "Choice"
                }, 
                "default_value": [
                    "M"
                ], 
                "authorized_values": [
                    {
                        "value": "M", 
                        "label": "best hit"
                    }, 
                    {
                        "value": "F", 
                        "label": "most frequent hit"
                    }
                ], 
                "format": {
                    "perl": "($value) ? \" -$value\" : \"\"", 
                    "python": "\" -\" + str(value)"
                }
            }, 
            "nbofhit": {
                "prompt": "Number of hsp to consider (-x)", 
                "type": {
                    "datatype_class": "Integer"
                }, 
                "default_value": [
                    "10"
                ], 
                "format": {
                    "perl": "(defined $value) ? \" -x $value\" : \"\"", 
                    "python": "(\"\", \" -x \" + str(value) )[value is not None and value != vdef]"
                }, 
                "comment": "<text lang=\"en\">0: all hsp </text> </comment>"
            }, 
            "taxonomicfilter": {
                "name": "taxonomicfilter", 
                "parameters": {
                    "position": {
                        "prompt": "Relative position in taxonomic hierarchy (-p)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -p $value\" : \"\"", 
                            "python": "(\"\", \" -p \" + str(value) )[value is not None]"
                        }, 
                        "ctrl": {
                            "perl": "(defined $position and (not defined $taxonomic_name and not defined $rank))", 
                            "python": "(position is not None and (taxonomic_name is None and rank is None)) or (taxonomic_name is not None and (position is None and rank is None)) or (rank is not None and (taxonomic_name is None and position is None)) "
                        }, 
                        "comment": "<text lang=\"en\">zero means: root of taxonomy, higher value: leaf or near </text> </comment>"
                    }, 
                    "taxonomic_name": {
                        "prompt": "Taxonomic Name (-n)", 
                        "type": {
                            "datatype_class": "String"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -n $value\" : \"\"", 
                            "python": "(\"\", \" -n \" + str(value).replace(' ','_') )[value is not None]"
                        }, 
                        "ctrl": {
                            "perl": "(defined $position and (not defined $taxonomic_name and not defined $rank))", 
                            "python": "(position is not None and (taxonomic_name is None and rank is None)) or (taxonomic_name is not None and (position is None and rank is None)) or (rank is not None and (taxonomic_name is None and position is None)) "
                        }
                    }, 
                    "rank": {
                        "prompt": "Taxonomic rank name (-r)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "null"
                        ], 
                        "authorized_values": [
                            {
                                "value": "null"
                            }, 
                            {
                                "value": "superkingdom", 
                                "label": "superkingdom"
                            }, 
                            {
                                "value": "kingdom", 
                                "label": "kingdom"
                            }, 
                            {
                                "value": "subkingdom", 
                                "label": "subkingdom"
                            }, 
                            {
                                "value": "superphylum", 
                                "label": "superphylum"
                            }, 
                            {
                                "value": "phylum", 
                                "label": "phylum"
                            }, 
                            {
                                "value": "subphylum", 
                                "label": "subphylum"
                            }, 
                            {
                                "value": "superclass", 
                                "label": "superclass"
                            }, 
                            {
                                "value": "class", 
                                "label": "class"
                            }, 
                            {
                                "value": "subclass", 
                                "label": "subclass"
                            }, 
                            {
                                "value": "infraclass", 
                                "label": "infraclass"
                            }, 
                            {
                                "value": "superorder", 
                                "label": "superorder"
                            }, 
                            {
                                "value": "order", 
                                "label": "order"
                            }, 
                            {
                                "value": "suborder", 
                                "label": "suborder"
                            }, 
                            {
                                "value": "infraorder", 
                                "label": "infraorder"
                            }, 
                            {
                                "value": "parvorder", 
                                "label": "parvorder"
                            }, 
                            {
                                "value": "superfamily", 
                                "label": "superfamily"
                            }, 
                            {
                                "value": "family", 
                                "label": "family"
                            }, 
                            {
                                "value": "subfamily", 
                                "label": "subfamily"
                            }, 
                            {
                                "value": "tribe", 
                                "label": "tribe"
                            }, 
                            {
                                "value": "subtribe", 
                                "label": "subtribe"
                            }, 
                            {
                                "value": "genus", 
                                "label": "genus"
                            }, 
                            {
                                "value": "subgenus", 
                                "label": "subgenus"
                            }, 
                            {
                                "value": "species_group", 
                                "label": "species_group"
                            }, 
                            {
                                "value": "species_subgroup", 
                                "label": "species_subgroup"
                            }, 
                            {
                                "value": "species", 
                                "label": "species"
                            }, 
                            {
                                "value": "subspecies", 
                                "label": "subspecies"
                            }, 
                            {
                                "value": "varietas", 
                                "label": "varietas"
                            }, 
                            {
                                "value": "forma", 
                                "label": "forma"
                            }
                        ], 
                        "format": {
                            "perl": "(defined $value) ? \" -r $value\" : \"\"", 
                            "python": "(\"\", \" -r \" + str(value) )[value is not None]"
                        }, 
                        "ctrl": {
                            "perl": "(defined $position and (not defined $taxonomic_name and not defined $rank))", 
                            "python": "(position is not None and (taxonomic_name is None and rank is None)) or (taxonomic_name is not None and (position is None and rank is None)) or (rank is not None and (taxonomic_name is None and position is None)) "
                        }, 
                        "comment": "<text lang=\"en\">If Taxonomic rank is not defined for one hit, it is not treated.</text> </comment>"
                    }
                }
            }, 
            "output": {
                "name": "output", 
                "parameters": {
                    "blastout": {
                        "prompt": "Blast output file(s) sort/split by specific taxonomic hierarchy (-b)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": "($value)? \" -b\" : \"\"", 
                            "python": "(\"\" , \" -b\") [value]"
                        }
                    }, 
                    "queryout": {
                        "prompt": "Query name write in file(s) sort/split by specific taxonomic hierarchy (-q)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": "($value)? \" -q\" : \"\"", 
                            "python": "(\"\" , \" -q\") [value]"
                        }
                    }, 
                    "fastaExtract": {
                        "prompt": "Extraction of fasta sequences.", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "ctrl": {
                            "perl": "$fastaExtract == 1 and $queryout == 1 and defined $query_seq", 
                            "python": "(fastaExtract and (queryout and query_seq is not None)) or (not fastaExtract)"
                        }, 
                        "comment": "<text lang=\"en\">Extract fasta sequence, matching specified taxonomic filter, from file containing query sequences witch are used to made blast.</text> </comment>"
                    }, 
                    "query_seq": {
                        "prompt": "Query sequences witch are used to made blast.", 
                        "type": {
                            "datatype_class": "Sequence", 
                            "data_formats": [
                                "FASTA"
                            ], 
                            "card": "1,n"
                        }, 
                        "precond": {
                            "perl": "defined $fastaExtract and defined $queryout", 
                            "python": "fastaExtract and queryout"
                        }, 
                        "format": {
                            "perl": " extractfasta -i $query *.qry\": \"\"", 
                            "python": " extractfasta -i \"+ str(value) + \" *.qry\") [value is not None]"
                        }
                    }
                }
            }
        }
    }, 
    "outputs": {
        "parameters": {
            "output": {
                "name": "output", 
                "parameters": {
                    "outfile": {
                        "isstdout": true, 
                        "prompt": "Output file", 
                        "type": {
                            "datatype_class": "Blast2taxoclassReport", 
                            "datatype_superclass": "Report"
                        }, 
                        "filenames": {
                            "perl": "\"blast2taxoclass.out\"", 
                            "python": "\"blast2taxoclass.out\""
                        }
                    }, 
                    "blastoutfile": {
                        "isout": true, 
                        "prompt": "Blast output file(s)", 
                        "type": {
                            "datatype_class": "BlastTextReport", 
                            "datatype_superclass": "Report"
                        }, 
                        "precond": {
                            "perl": "defined $blastout", 
                            "python": "blastout"
                        }, 
                        "filenames": {
                            "perl": "\"*.blast\"", 
                            "python": "\"*.blast\""
                        }
                    }, 
                    "queryoutfile": {
                        "isout": true, 
                        "prompt": "Query name file", 
                        "type": {
                            "datatype_class": "QueryNameReport", 
                            "datatype_superclass": "Report"
                        }, 
                        "precond": {
                            "perl": "defined $queryout", 
                            "python": "queryout"
                        }, 
                        "filenames": {
                            "perl": "\"*.qry\"", 
                            "python": "\"*.qry\""
                        }
                    }, 
                    "fastafile": {
                        "isout": true, 
                        "prompt": "Fasta file", 
                        "type": {
                            "datatype_class": "Sequence"
                        }, 
                        "precond": {
                            "perl": "defined $fastaExtract", 
                            "python": "fastaExtract"
                        }, 
                        "filenames": {
                            "perl": "\"*.fasta\"", 
                            "python": "\"*.fasta\""
                        }
                    }
                }
            }
        }
    }, 
    "comment": "<text lang=\"en\"> Extract the Identifier and Data Bank of the hits from the summary of a blast report ( in text format -m 0-6 ) The result is in USA list format. </text> </comment>"
}