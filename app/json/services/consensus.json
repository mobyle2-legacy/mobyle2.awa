{
    "type": "program", 
    "name": "consensus", 
    "version": "6d", 
    "title": "CONSENSUS", 
    "description": "<text lang=\"en\">Identification of consensus patterns in unaligned DNA and protein sequences</text> </description>", 
    "authors": "Gerald Z.Hertz, G.D. Stormo</authors>", 
    "references": [
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Larget, B. and D. Simon (1999). Markov chain Monte Carlo algorithms for the Bayesian analysis of phylogenetic trees. Molecular Biology and Evolution 16:750-759.</reference>"
        }, 
        {
            "value": "Simon, D. and B. Larget. 1998. Bayesian analysis in molecular biology and evolution (BAMBE), version 1.01 beta. Department of Mathematics and Computer Science, Duquesne University.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Gascuel O., 1997, BIONJ: an improved version of the NJ algorithm based on a simple model of sequence data, Molecular Biology and Evolution 14(7):685-695</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer,Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.</reference>"
        }, 
        {
            "value": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer, Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.</reference>"
        }, 
        {
            "value": "Criscuolo A, Gribaldo S (2010) BMGE (Block Mapping and Gathering with Entropy): selection of phylogenetic informative regions from multiple sequence alignments. BMC Evolutionary Biology 10:210. </reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Huang, X. and Madan, A. (1999) CAP3: A DNA Sequence Assembly Program. Genome Research, 9: 868-877.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Christian N. S. Pedersen, Rune B. Lyngso and Jotun Hein. Comparison of coding DNA in Proceedings of the 9th Annual Symposium of Combinatorial Pattern Matching (CPM), 1998.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "G.Z. Hertz and G.D. Stormo. Identification of consensus patterns in unaligned DNA and protein sequences: a large-deviation statistical basis for penalizing gaps. In: Proceedings of the Third International Conference on Bioinformatics and Genome Research (H.A. Lim, and C.R. Cantor, editors). World Scientific Publishing Co., Ltd. Singapore, 1995. pages 201--216.</reference>"
        }
    ], 
    "sourcelinks": [
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net/download", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net/download", 
        "https://projets.pasteur.fr/projects/list_files/blast2usa", 
        "ftp://ftp.pasteur.fr/pub/gensoft/projects/BMGE/", 
        "ftp://www.isrec.isb-sib.ch/pub/software/unix/boxshade/", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://seq.cs.iastate.edu/cap3.html", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://sourceforge.net/projects/codonw/files/", 
        "http://www.daimi.au.dk/~ocaprani/ComAlign/programs/", 
        "http://www.daimi.au.dk/~cstorm/combat/", 
        "http://emboss.sourceforge.net/download", 
        "http://gzhertz.home.comcast.net/~gzhertz/CONSENSUS_2004-04-14.TAR.gz"
    ], 
    "homepagelinks": [
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net", 
        "https://projets.pasteur.fr/projects/show/blast2usa", 
        "http://www.ch.embnet.org/software/BOX_form.html", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://seq.cs.iastate.edu/", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://codonw.sourceforge.net/", 
        "http://www.daimi.au.dk/~ocaprani/ComAlign/ComAlign.html", 
        "http://www.daimi.au.dk/~cstorm/combat/", 
        "http://emboss.sourceforge.net", 
        "http://gzhertz.home.comcast.net/~gzhertz/"
    ], 
    "doclinks": [
        "http://bioweb2.pasteur.fr/docs/EMBOSS/abiview.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/antigenic.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranambig.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/banana.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/biosed.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", 
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html", 
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", 
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html", 
        "http://bioweb2.pasteur.fr/docs/BMGE/BMGE_doc.pdf", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/btwisted.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cai.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/chaos.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/charge.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/checktrans.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/chips.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/cif/cif.html", 
        "http://bioweb2.pasteur.fr/docs/cif/compatible_cohesive_ends.txt", 
        "http://bioweb2.pasteur.fr/docs/cif/paillasse_liste.txt", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cirdna.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/clique.html", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/codcmp.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://serpico.rennes.inria.fr/doku.php?id=software:nd-safir:index", 
        "http://serpico.rennes.inria.fr/doku.php?id=software:nd-safir:index", 
        "http://serpico.rennes.inria.fr/doku.php?id=software:nd-safir:index", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/coderet.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://codonw.sourceforge.net/Readme.html", 
        "http://codonw.sourceforge.net/Tutorial.html", 
        "http://www.daimi.au.dk/~ocaprani/ComAlign/HowTo.html", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/compseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/consense.html"
    ], 
    "mobyle_cats": [
        "display", 
        "alignment:formatter", 
        "sequence:protein:motifs", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "phylogeny:bayesian", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "phylogeny:distance", 
        "sequence:edit", 
        "alignment:pairwise", 
        "database:search:filter", 
        "database:search:homology", 
        "database:search:display", 
        "database:search:filter", 
        "database:search:display", 
        "database:search:homology", 
        "alignment:multiple:information", 
        "alignment:multiple:display", 
        "sequence:nucleic:composition", 
        "sequence:nucleic:codon_usage", 
        "assembly:assembly", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "sequence:protein:composition", 
        "sequence:nucleic:codon_usage", 
        "sequence:enzyme:analysis", 
        "sequence:nucleic:restriction", 
        "display:nucleic:restriction", 
        "display", 
        "phylogeny:others", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "sequence:nucleic:codon_usage", 
        "Bio-Imaging", 
        "Bio-Imaging", 
        "Bio-Imaging", 
        "sequence:nucleic:edit", 
        "sequence:nucleic:codon_usage", 
        "alignment:multiple", 
        "alignment:pairwise", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "sequence:formatter", 
        "phylogeny:tree_analyser", 
        "sequence:protein:pattern", 
        "sequence:nucleic:pattern"
    ], 
    "command": "concatfasta", 
    "inputs": {
        "parameters": {
            "prog": {
                "ismandatory": true, 
                "prompt": "Program to run", 
                "type": {
                    "datatype_class": "Choice"
                }, 
                "default_value": [
                    "consensus"
                ], 
                "authorized_values": [
                    {
                        "value": "consensus", 
                        "label": "Search for fixed width patterns (consensus)"
                    }, 
                    {
                        "value": "wconsensus", 
                        "label": "Same as consensus, width not fixed (wconsensus)"
                    }
                ], 
                "format": {
                    "perl": "$sequence.wcons ; $prog \"", 
                    "python": "\" + str(sequence) + \".wcons  ; \" + str(prog)"
                }
            }, 
            "sequence": {
                "ismandatory": true, 
                "prompt": "Sequences file (-f)", 
                "type": {
                    "datatype_class": "Sequence", 
                    "data_formats": [
                        "FASTA"
                    ]
                }, 
                "format": {
                    "perl": "\" -f $sequence.wcons\"", 
                    "python": "\" -f \" + str(sequence) + \".wcons\""
                }
            }, 
            "required": {
                "name": "required", 
                "parameters": {
                    "width": {
                        "ismandatory": true, 
                        "prompt": "Width of pattern for consensus program (-L)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "precond": {
                            "perl": "$prog eq \"consensus\"", 
                            "python": "prog == \"consensus\""
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -L$value\" : \"\"", 
                            "python": "( \"\" , \" -L\" + str(value) )[ value is not None ]"
                        }
                    }, 
                    "standard_deviation": {
                        "ismandatory": true, 
                        "prompt": "Number of standard deviations to lower the information content at each position before identifying information peaks for wconsensus program (-s)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "precond": {
                            "perl": "$prog eq \"wconsensus\"", 
                            "python": "prog == \"wconsensus\""
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "format": {
                            "perl": "\" -s$value\"", 
                            "python": "\" -s\" + str(value)"
                        }, 
                        "comment": "<text lang=\"en\">A range of values should be tried. For example, try values of 0.5, 1, 1.5, and 2. The overall best alignment is the one having the smallest e-value.</text> </comment>"
                    }
                }
            }, 
            "basic_options": {
                "name": "basic_options", 
                "parameters": {
                    "alphabet_options": {
                        "name": "alphabet_options", 
                        "parameters": {
                            "alphabet": {
                                "ismandatory": true, 
                                "prompt": "Choose an alphabet", 
                                "type": {
                                    "datatype_class": "Choice"
                                }, 
                                "default_value": [
                                    "null"
                                ], 
                                "authorized_values": [
                                    {
                                        "value": "null", 
                                        "label": "Choose an alphabet"
                                    }, 
                                    {
                                        "value": "dna-alphabet", 
                                        "label": "DNA"
                                    }, 
                                    {
                                        "value": "prot-alphabet", 
                                        "label": "Protein"
                                    }, 
                                    {
                                        "value": "users", 
                                        "label": "Users file"
                                    }
                                ], 
                                "format": {
                                    "perl": "$value \"", 
                                    "python": "\"+ value)[ value in( \"dna-alphabet\" , \"prot-alphabet\" )]"
                                }, 
                                "ctrl": {
                                    "perl": "($value eq \"users\" and not defined $ascii_alphabet) or ($value eq \"prot-alphabet\" or $value eq \"dna-alphabet\" or $value eq \"null\")", 
                                    "python": "(value == \"users\" and ascii_alphabet is not None) or (value in (\"prot-alphabet\",\"dna-alphabet\", \"null\") )"
                                }
                            }, 
                            "ascii_alphabet": {
                                "prompt": "User Alphabet file (-a)", 
                                "type": {
                                    "datatype_class": "ConsensusAlphabet", 
                                    "datatype_superclass": "AbstractText"
                                }, 
                                "precond": {
                                    "perl": "$alphabet eq \"users\"", 
                                    "python": "alphabet == \"users\""
                                }, 
                                "format": {
                                    "perl": "(defined $value) ? \" -a $value\" : \"\"", 
                                    "python": "( \"\" , \" -a \" + str(value) )[ value is not None ]"
                                }, 
                                "comment": "<text lang=\"en\">Each line contains a letter (a symbol in the alphabet) followed by an optional normalization number (default: 1.0). The normalization is based on the relative prior probabilities of the letters. For nucleic acids, this might be the genomic frequency of the bases; however, if the -d option is not used, the frequencies observed in your own sequence data are used. In nucleic acid alphabets, a letter and its complement appear on the same line, separated by a colon (a letter can be its own complement, e.g. when using a dimer alphabet).</text> <text lang=\"en\">Complementary letters may use the same normalization number. Only the standard 26 letters are permissible; however, when the -CS option is used, the alphabet is case sensitive so that a total of 52 different characters are possible.</text> <text lang=\"en\">POSSIBLE LINE FORMATS WITHOUT COMPLEMENTARY LETTERS:</text> <text lang=\"en\">letter</text> <text lang=\"en\">letter normalization</text> <text lang=\"en\">POSSIBLE LINE FORMATS WITH COMPLEMENTARY LETTERS:</text> <text lang=\"en\">letter:complement</text> <text lang=\"en\">letter:complement normalization</text> <text lang=\"en\">letter:complement normalization:complement's_normalization</text> </comment>"
                            }, 
                            "prior": {
                                "prompt": "Use the designated prior probabilities of the letters to override the observed frequencies (-d)", 
                                "type": {
                                    "datatype_class": "Boolean"
                                }, 
                                "default_value": [
                                    "0"
                                ], 
                                "format": {
                                    "perl": "($value) ? \" -d\" : \"\"", 
                                    "python": "( \"\" , \" -d\" )[ value ]"
                                }, 
                                "comment": "<text lang=\"en\">By default, the program uses the frequencies observed in your own sequence data for the prior probabilities of the letters. However, if the -d option is set, the prior probabilities designated by the alphabet options. If the -d option is not set, they are still used to determine the sequence alphabet, but any prior probability information is ignored.</text> </comment>"
                            }
                        }
                    }, 
                    "complement": {
                        "prompt": "Complement of nucleic acid sequences (-c)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "authorized_values": [
                            {
                                "value": "0", 
                                "label": "Ignore the complementary strand (0)"
                            }, 
                            {
                                "value": "1", 
                                "label": "Include both strands as separate sequences (1)"
                            }, 
                            {
                                "value": "2", 
                                "label": "Include both strands as a single sequence (2)"
                            }, 
                            {
                                "value": "3", 
                                "label": "Assume that the pattern is symmetrical (consensus program only) (3)"
                            }
                        ], 
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -c$value\" : \"\"", 
                            "python": "( \"\" , \" -c\" + str(value) )[ value is not None and value != vdef]"
                        }, 
                        "ctrl": {
                            "perl": "($value eq \"3\" and $prog eq \"consensus\") or ($value eq \"0\" or $value eq \"1\" or $value eq \"2\" )", 
                            "python": "(value == \"3\" and prog == \"consensus\") or (value == \"0\" or value == \"1\" or value == \"2\" )"
                        }
                    }, 
                    "max_cycle": {
                        "prompt": "How many words per matrix for each sequence to contribute", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "null"
                        ], 
                        "authorized_values": [
                            {
                                "value": "null", 
                                "label": "No repeat"
                            }, 
                            {
                                "value": "-n", 
                                "label": "Allow each sequence to contribute zero or more words per matrix (-n)"
                            }, 
                            {
                                "value": "-N", 
                                "label": "Allow each sequence to contribute one or more words per matrix (-N)"
                            }
                        ], 
                        "format": {
                            "perl": "($value ne $vdef) ? \" $value$max_cycle_nb\" : \"\"", 
                            "python": "( \"\" , \" \" + str(value) + str(max_cycle_nb) )[ value != vdef ]"
                        }, 
                        "ctrl": {
                            "perl": "($value eq \"-n\" or $value eq \"-N\") and defined($max_cycle_nb)", 
                            "python": "(value == \"-n\" or value ==\"-N\") and max_cycle_nb is not None"
                        }, 
                        "comment": "<text lang=\"en\">-n integer: repeat the matrix building cycle a maximum of \"integer\" times and allow each sequence to contribute zero or more words per matrix.</text> <text lang=\"en\">-N integer: repeat the matrix building cycle a maximum of \"integer\" times and allow each sequence to contribute one or more words per matrix</text> </comment>"
                    }, 
                    "max_cycle_nb": {
                        "prompt": "Maximum repeat of the matrix building cycle for -n or -N", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "format": {
                            "perl": "\"\"", 
                            "python": "\"\""
                        }
                    }
                }
            }, 
            "advenced_options": {
                "name": "advenced_options", 
                "parameters": {
                    "queue": {
                        "prompt": "Maximum number of matrices to save between cycles of the program (-q)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "default_value": [
                            "200"
                        ], 
                        "format": {
                            "perl": "(defined $value ) ? \" -q $value\" : \"\"", 
                            "python": "( \"\" , \" -q \" + str(value) )[ value is not None ]"
                        }
                    }, 
                    "distance": {
                        "prompt": "Minimum distance between the starting points of words within the same matrix pattern (-m)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "precond": {
                            "perl": "$max_cycle ne \"null\"", 
                            "python": "max_cycle != \"null\""
                        }, 
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -m$value \" : \"\"", 
                            "python": "( \"\" , \" -m\" + str(value) )[ value is not None and value != vdef]"
                        }, 
                        "ctrl": {
                            "perl": "= 0 and ($max_cycle == \"-n\" or $max_cycle == \"-N\")", 
                            "python": " 0 and (max_cycle == \"-n\" or max_cycle == \"-N\")"
                        }, 
                        "comment": "<text lang=\"en\">The minimum distance between the starting points of words within the same matrix pattern; must be a positive integer; can only be used when the \"-n\" or \"-N\" option is also used.</text> <text lang=\"en\">For wconsensus, the default value is 1.</text> <text lang=\"en\">For consensus, this number is indicated by the width (-L).</text> </comment>"
                    }, 
                    "terminate": {
                        "prompt": "Terminate the program this number of cycles after the current most significant alignment is identified (-t)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -t$value \" : \"\"", 
                            "python": "( \"\" , \" -t\" + str(value) )[ value is not None ]"
                        }, 
                        "comment": "<text lang=\"en\">default: terminate only when the maximum number of matrix building cycles is completed.</text> </comment>"
                    }, 
                    "progeny": {
                        "prompt": "Save the top progeny matrices", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "-pr2"
                        ], 
                        "authorized_values": [
                            {
                                "value": "-pr1", 
                                "label": "Regardless of parentage (-pr1)"
                            }, 
                            {
                                "value": "-pr2", 
                                "label": "For each parental matrix (-pr2)"
                            }
                        ], 
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\"", 
                            "python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]"
                        }, 
                        "comment": "<text lang=\"en\">-pr2 option prevents a strong pattern found in only a subset of the sequences from overwhelming the algorithm and eliminating other potential patterns. This undesirable situation can occur when a subset of the sequences share an evolutionary relationship not common to the majority of the sequences.</text> </comment>"
                    }, 
                    "linearly": {
                        "prompt": "Seed with the first sequence and proceed linearly through the list (-l)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": "($value) ? \" -l\" : \"\"", 
                            "python": "( \"\" , \" -l\" )[ value ]"
                        }, 
                        "ctrl": {
                            "perl": "($value == 1 and $max_cycle != \"-n\") or $value == 0", 
                            "python": "(value == 1 and max_cycle != \"-n\") or value == 0"
                        }, 
                        "comment": "<text lang=\"en\">This option results in a significant speed up in the program, but the algorithm becomes dependent on the order of the sequence-file names.</text> </comment>"
                    }, 
                    "terminal_gap": {
                        "prompt": "Permit terminal gaps for wconsensus program", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "precond": {
                            "perl": "$prog eq \"wconsensus\"", 
                            "python": "prog == \"wconsensus\""
                        }, 
                        "default_value": [
                            "-pg0"
                        ], 
                        "authorized_values": [
                            {
                                "value": "-pg0", 
                                "label": "Do NOT permit terminal gaps (-pg0)"
                            }, 
                            {
                                "value": "-pg1", 
                                "label": "Permit penalized terminal gaps (-pg1)"
                            }
                        ], 
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" $value\" : \"\"", 
                            "python": "( \"\" , \" \" + str(value) )[ value is not None and value != vdef]"
                        }
                    }
                }
            }, 
            "output_options": {
                "name": "output_options", 
                "parameters": {
                    "top_matrices": {
                        "prompt": "Number of top matrices to print (-pt)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "default_value": [
                            "4"
                        ], 
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -pt$value\" : \"\"", 
                            "python": "( \"\" , \" -pt\" + str(value) )[ value is not None and value != vdef]"
                        }, 
                        "comment": "<text lang=\"en\">A negative value means print all the top matrices.</text> </comment>"
                    }, 
                    "final_matrices": {
                        "prompt": "Number of final matrices to print (-pf)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "default_value": [
                            "4"
                        ], 
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -pf$value\" : \"\"", 
                            "python": "( \"\" , \" -pf\" + str(value) )[ value is not None and value != vdef]"
                        }, 
                        "comment": "<text lang=\"en\">Default when NOT using -n or -N option: print 4 matrices; default when using -n or -N option: print no matrices.</text> </comment>"
                    }
                }
            }
        }
    }, 
    "outputs": {
        "parameters": {
            "outfile": {
                "isout": true, 
                "prompt": "Results file", 
                "type": {
                    "datatype_class": "Text"
                }, 
                "format": {
                    "perl": " $prog.results\"", 
                    "python": " \" + str(prog) + \".results\" "
                }, 
                "filenames": {
                    "perl": "\"$prog.results\"", 
                    "python": "str(prog) + \".results\""
                }
            }, 
            "consensus_format": {
                "isout": true, 
                "prompt": "wcons file", 
                "type": {
                    "datatype_class": "Text"
                }, 
                "filenames": {
                    "perl": "\"*.wcons\"", 
                    "python": "\"*.wcons\""
                }
            }
        }
    }, 
    "comment": "<text lang=\"en\">CONSENSE reads a file of computer-readable trees and prints out (and may also write out onto a file) a consensus tree.</text> </comment>"
}