{
    "type": "program", 
    "name": "blast2mydb", 
    "version": "1.0", 
    "title": "BLAST2MYDB", 
    "description": "<text lang=\"en\">NCBI BLAST, with gaps against my sequences database</text> </description>", 
    "authors": "C. Maufrais</authors>", 
    "references": [
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Larget, B. and D. Simon (1999). Markov chain Monte Carlo algorithms for the Bayesian analysis of phylogenetic trees. Molecular Biology and Evolution 16:750-759.</reference>"
        }, 
        {
            "value": "Simon, D. and B. Larget. 1998. Bayesian analysis in molecular biology and evolution (BAMBE), version 1.01 beta. Department of Mathematics and Computer Science, Duquesne University.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Gascuel O., 1997, BIONJ: an improved version of the NJ algorithm based on a simple model of sequence data, Molecular Biology and Evolution 14(7):685-695</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer,Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.</reference>"
        }
    ], 
    "sourcelinks": [
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net/download", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net/download"
    ], 
    "homepagelinks": [
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net"
    ], 
    "doclinks": [
        "http://bioweb2.pasteur.fr/docs/EMBOSS/abiview.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/antigenic.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranambig.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/banana.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/biosed.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", 
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html"
    ], 
    "mobyle_cats": [
        "display", 
        "alignment:formatter", 
        "sequence:protein:motifs", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "phylogeny:bayesian", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "phylogeny:distance", 
        "sequence:edit", 
        "alignment:pairwise", 
        "database:search:filter", 
        "database:search:homology"
    ], 
    "command": "blast2genoclass", 
    "inputs": {
        "parameters": {
            "db": {
                "name": "db", 
                "parameters": {
                    "formatdb": {
                        "ishidden": true, 
                        "type": {
                            "datatype_class": "String"
                        }, 
                        "format": {
                            "perl": "\"formatdb \"", 
                            "python": "\"formatdb \""
                        }
                    }, 
                    "protein_db": {
                        "ismandatory": true, 
                        "prompt": "Protein db", 
                        "type": {
                            "datatype_class": "Sequence", 
                            "data_formats": [
                                "FASTA"
                            ], 
                            "card": "2,n"
                        }, 
                        "precond": {
                            "perl": "$blast2 =~ /^blast[px]$/", 
                            "python": "blast2 in [ \"blastx\" , \"blastp\" ]"
                        }, 
                        "format": {
                            "perl": "\" -i $value\"", 
                            "python": "\" -i \"+ str(value)"
                        }, 
                        "comment": "<text lang=\"en\">Create a protein database for blastx</text> </comment>"
                    }, 
                    "nucleotid_db": {
                        "ismandatory": true, 
                        "prompt": "Nucleotid db", 
                        "type": {
                            "datatype_class": "Sequence", 
                            "data_formats": [
                                "FASTA"
                            ], 
                            "card": "2,n"
                        }, 
                        "precond": {
                            "perl": "$blast2 =~ /^(blastn|tblast[nx]|psitblastn)$/", 
                            "python": "blast2 in [ \"blastn\" , \"tblastx\", \"tblastn\" , \"psitblastn\" ]"
                        }, 
                        "format": {
                            "perl": "\"-p F -i $value\"", 
                            "python": "\"-p F -i \"+ str(value)"
                        }, 
                        "comment": "<text lang=\"en\">Create a nucleotid database for blastn, tblastn or tblastx</text> </comment>"
                    }, 
                    "db_name": {
                        "ismandatory": true, 
                        "prompt": "the name of my db", 
                        "type": {
                            "datatype_class": "String"
                        }, 
                        "default_value": [
                            "myDatabase"
                        ], 
                        "format": {
                            "python": "\" -n \" + str( value )"
                        }
                    }
                }
            }, 
            "blast_init": {
                "ishidden": true, 
                "prompt": "Blast initiation", 
                "type": {
                    "datatype_class": "String"
                }, 
                "format": {
                    "perl": " blastall \"", 
                    "python": " blastall \""
                }
            }, 
            "blast2": {
                "ismandatory": true, 
                "prompt": "Blast program (-p)", 
                "type": {
                    "datatype_class": "Choice"
                }, 
                "default_value": [
                    "null"
                ], 
                "authorized_values": [
                    {
                        "value": "null", 
                        "label": "Choose a program"
                    }, 
                    {
                        "value": "blastn", 
                        "label": "Blastn (nucleotide query / nucleotide db)"
                    }, 
                    {
                        "value": "blastx", 
                        "label": "Blastx (translated nucleotide query / protein db)"
                    }, 
                    {
                        "value": "tblastx", 
                        "label": "tBlastx (translated nucleotide query / translated nucleotide db)"
                    }, 
                    {
                        "value": "blastp", 
                        "label": "Blastp (protein query / protein db)"
                    }, 
                    {
                        "value": "tblastn", 
                        "label": "tBlastn (protein query / translated nucleotide db)"
                    }, 
                    {
                        "value": "psitblastn", 
                        "label": "psitBlastn (protein query / translated nucleotide db)"
                    }
                ], 
                "format": {
                    "perl": "\" -p $value\"", 
                    "python": "\" -p \"+ str(value)"
                }, 
                "comment": "<text lang=\"en\">- Blastp compares an amino acid query sequence against a protein sequence database;</text> <text lang=\"en\">- Blastn compares a nucleotide query sequence against a nucleotide sequence database;</text> <text lang=\"en\">- Blastx compares the six-frame conceptual translation products of a nucleotide query sequence (both strands) against a protein sequence database;</text> <text lang=\"en\">- tBlastn compares a protein query sequence against a nucleotide sequence database dynamically translated in all six reading frames (both strands).</text> <text lang=\"en\">- tBlastx compares the six-frame translations of a nucleotide query sequence against the six-frame translations of a nucleotide sequence database.</text> <text lang=\"en\">- psitBlastn compares a protein query sequence against a nucleotide sequence database dynamically translated in all six reading frames (both strands) using a position specific matrix created by PSI-BLAST.</text> </comment>"
            }, 
            "blastdb": {
                "ishidden": true, 
                "type": {
                    "datatype_class": "String"
                }, 
                "format": {
                    "perl": "\" -d $db_name\"", 
                    "python": "\" -d \"+ str( db_name )"
                }
            }, 
            "query": {
                "name": "query", 
                "parameters": {
                    "query_seq": {
                        "ismaininput": true, 
                        "ismandatory": true, 
                        "prompt": "Query (-i)", 
                        "type": {
                            "datatype_class": "Sequence", 
                            "data_formats": [
                                "FASTA"
                            ], 
                            "card": "1,n"
                        }, 
                        "format": {
                            "perl": "\" -i $query\"", 
                            "python": "\" -i \"+ str(query_seq)"
                        }, 
                        "comment": "<text lang=\"en\">Read (first, query) sequence or set from file</text> </comment>"
                    }, 
                    "start_region": {
                        "prompt": "Start of required region in query sequence (-L)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "comment": "<text lang=\"en\">Location on query sequence</text> </comment>"
                    }, 
                    "end_region": {
                        "prompt": "End of required region in query sequence (-L)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "precond": {
                            "perl": "defined $start_region", 
                            "python": "start_region is not None"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -L \\\"$start_region $value\\\"\" : \" -L \\\"$start_region\\\"\"", 
                            "python": "(' -L \"%s\"' % (str(start_region)), ' -L \"%s %s\"' % (str(start_region), str(value)))[value is not None]"
                        }, 
                        "comment": "<text lang=\"en\">Location on query sequence</text> </comment>"
                    }, 
                    "concat": {
                        "prompt": "Number of concatenated queries (blastn or tblastn) (-B)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "precond": {
                            "perl": "$blast2 =~ /^t?blastn$/", 
                            "python": "blast2 in [ \"blastn\" , \"tblastn\" ]"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -B $value\" : \"\"", 
                            "python": "(\"\" , \" -B \"+str(value))[value is not None]"
                        }
                    }
                }
            }, 
            "scoring_opt": {
                "name": "scoring_opt", 
                "parameters": {
                    "open_a_gap": {
                        "prompt": "Cost to open a gap (-G)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -G $value\" : \"\"", 
                            "python": "(\"\" , \" -G \"+str(value))[value is not None]"
                        }, 
                        "comment": "<text lang=\"en\">Default: 5 for blastn; 10 for blastp, blastx and tblastn</text> </comment>"
                    }, 
                    "extend_a_gap": {
                        "prompt": "Cost to extend a gap (-E)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -E $value\" : \"\"", 
                            "python": "(\"\" , \" -E \"+str(value))[value is not None]"
                        }, 
                        "comment": "<text lang=\"en\">Default: 2 for blastn; 1 for blastp, blastx and tblastn</text> <text lang=\"en\">Limited values for gap existence and extension are supported for these programs. Some supported and suggested values are:</text> <text lang=\"en\">Existence Extension</text> <text lang=\"en\">10 -- 1</text> <text lang=\"en\">10 -- 2</text> <text lang=\"en\">11 -- 1</text> <text lang=\"en\">8 -- 2</text> <text lang=\"en\">9 -- 2</text> </comment>"
                    }, 
                    "scoring_blast": {
                        "name": "scoring_blast", 
                        "precond": {
                            "perl": "$blast2 ne \"blastn\"", 
                            "python": "blast2 != \"blastn\""
                        }, 
                        "parameters": {
                            "matrix": {
                                "prompt": "Similarity matrix (-M)", 
                                "type": {
                                    "datatype_class": "Choice"
                                }, 
                                "default_value": [
                                    "BLOSUM62"
                                ], 
                                "authorized_values": [
                                    {
                                        "value": "BLOSUM62", 
                                        "label": "BLOSUM62"
                                    }, 
                                    {
                                        "value": "BLOSUM45", 
                                        "label": "BLOSUM45"
                                    }, 
                                    {
                                        "value": "BLOSUM80", 
                                        "label": "BLOSUM80"
                                    }, 
                                    {
                                        "value": "PAM30", 
                                        "label": "PAM30"
                                    }, 
                                    {
                                        "value": "PAM70", 
                                        "label": "PAM70"
                                    }
                                ], 
                                "format": {
                                    "perl": "(defined $value and $value ne $vdef) ? \" -M $value\" : \"\"", 
                                    "python": "(\"\" , \" -M \"+str(value))[value is not None and value != vdef]"
                                }
                            }
                        }
                    }, 
                    "scoring_blastn": {
                        "name": "scoring_blastn", 
                        "precond": {
                            "perl": "$blast2 eq \"blastn\"", 
                            "python": "blast2 == \"blastn\""
                        }, 
                        "parameters": {
                            "mismatch": {
                                "prompt": "Penalty for a nucleotide mismatch (-q)", 
                                "type": {
                                    "datatype_class": "Float"
                                }, 
                                "default_value": [
                                    "-3"
                                ], 
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" -q $value\" : \"\"", 
                                    "python": "(\"\" , \" -q \"+str(value))[value is not None and value != vdef]"
                                }
                            }, 
                            "match": {
                                "prompt": "Reward for a nucleotide match (-r)", 
                                "type": {
                                    "datatype_class": "Float"
                                }, 
                                "default_value": [
                                    "1"
                                ], 
                                "format": {
                                    "perl": "(defined $value and $value != $vdef) ? \" -r $value\" : \"\"", 
                                    "python": "(\"\" , \" -r \"+str(value))[value is not None and value != vdef]"
                                }
                            }
                        }
                    }, 
                    "frameshift": {
                        "prompt": "Frame shift penalty (-w)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -w $value\" : \"\"", 
                            "python": "(\"\", \" -w \"+str(value))[value is not None]"
                        }
                    }
                }
            }, 
            "filter_opt": {
                "name": "filter_opt", 
                "parameters": {
                    "filter": {
                        "prompt": "Filter or Masking query sequence (DUST with blastn, SEG with others) (-F)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "format": {
                            "perl": "($value) ? \"\" : \" -F F\"", 
                            "python": "(\" -F F\" , \"\")[ value ]"
                        }
                    }, 
                    "other_filters": {
                        "prompt": "Filtering options (Filter must be true)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "precond": {
                            "perl": "$filter and not $other_masking", 
                            "python": "filter and not other_masking"
                        }, 
                        "default_value": [
                            "null"
                        ], 
                        "authorized_values": [
                            {
                                "value": "null", 
                                "label": "Default"
                            }, 
                            {
                                "value": "v1", 
                                "label": "Coiled-coiled filter (C)"
                            }, 
                            {
                                "value": "v2", 
                                "label": "Both SEG and coiled-coiled filters (\"C;S\")"
                            }, 
                            {
                                "value": "v3", 
                                "label": "DUST filter for DNA (D)"
                            }
                        ], 
                        "comment": "<text lang=\"en\">A coiled-coiled filter, based on the work of Lupas et al. (Science, vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al., J Gen Virol, vol. 76, pp. 2923-32 (1995))</text> </comment>"
                    }, 
                    "other_masking": {
                        "prompt": "Masking options (Filter must be true)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "precond": {
                            "perl": "$filter and not $other_filters", 
                            "python": "filter and not other_filters"
                        }, 
                        "default_value": [
                            "null"
                        ], 
                        "authorized_values": [
                            {
                                "value": "null"
                            }, 
                            {
                                "value": "v1", 
                                "label": "Masking with SEG should only be done during the building of initial words (\"m S\")"
                            }, 
                            {
                                "value": "v2", 
                                "label": "Masking with coiled-coil should only be done during the building of initial words (\"m D\")"
                            }, 
                            {
                                "value": "v3", 
                                "label": "Masking with DUST should only be done during the building of initial words (\"m C\")"
                            }, 
                            {
                                "value": "v4", 
                                "label": "Lower-case masking (-U must be true) ( -F m\")"
                            }
                        ], 
                        "ctrl": {
                            "perl": "($value eq 'null' or $value eq 'v1' or $value eq 'v2' or $value eq 'v3']) or ($value eq 'v4' and $lower_case)", 
                            "python": "value in ['null', 'v1', 'v2', 'v3'] or (value == 'v4' and lower_case)"
                        }, 
                        "comment": "<text lang=\"en\">A coiled-coiled filter, based on the work of Lupas et al. (Science, vol 252, pp. 1162-4 (1991)) written by John Kuzio (Wilson et al., J Gen Virol, vol. 76, pp. 2923-32 (1995)).</text> <text lang=\"en\">It is possible to specify that the masking should only be done during the process of building the initial words .</text> <text lang=\"en\">If the -U option (to mask any lower-case sequence in the input FASTA file) is used and one does not wish any other filtering, but does wish to mask when building the lookup tables then one should specify: -F 'm'</text> </comment>"
                    }, 
                    "lower_case": {
                        "prompt": "Use lower case filtering (-U)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": "($value) ? \" -U T\" : \"\"", 
                            "python": "(\"\", \" -U T\")[ bool(value) ]"
                        }, 
                        "comment": "<text lang=\"en\">This option specifies that any lower-case letters in the input FASTA file should be masked.</text> </comment>"
                    }
                }
            }, 
            "selectivity_opt": {
                "name": "selectivity_opt", 
                "parameters": {
                    "Expect": {
                        "prompt": "Expected value (-e)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "10"
                        ], 
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -e $value\" : \"\"", 
                            "python": "(\"\" , \" -e \"+str(value))[value is not None and value != vdef]"
                        }, 
                        "comment": "<text lang=\"en\"> The statistical significance threshold for reporting matches against database sequences; the default value is 10, such that 10 matches are expected to be found merely by chance, according to the stochastic model of Karlin and Altschul (1990). If the statistical significance ascribed to a match is greater than the EXPECT threshold, the match will not be reported. Lower EXPECT thresholds are more stringent, leading to fewer chance matches being reported. Fractional values are acceptable. </text> </comment>"
                    }, 
                    "word_size": {
                        "prompt": "Word Size (-W)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -W $value\" : \"\"", 
                            "python": "(\"\" , \" -W \"+str(value))[value is not None]"
                        }, 
                        "comment": "<text lang=\"en\">Use words of size N.</text> <text lang=\"en\">Zero invokes default behavior</text> <text lang=\"en\">Default values:</text> <text lang=\"en\">- 11 for blastn</text> <text lang=\"en\">- 3 for others</text> </comment>"
                    }, 
                    "dist_hits": {
                        "prompt": "Multiple Hits window size (-A)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -A $value\" : \"\"", 
                            "python": "(\"\" , \" -A \"+str(value))[value is not None]"
                        }, 
                        "comment": "<text lang=\"en\">Default: zero for all programs</text> </comment>"
                    }, 
                    "extend_hit": {
                        "prompt": "Threshold for extending hits (-f)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -f $value\" : \"\"", 
                            "python": "(\"\" , \" -f \"+str(value))[value is not None]"
                        }, 
                        "comment": "<text lang=\"en\">Blast seeks first short word pairs whose aligned score reaches at least this value.</text> <text lang=\"en\">Default values:</text> <text lang=\"en\">- 0 for blastn</text> <text lang=\"en\">- 11 for blastp</text> <text lang=\"en\">- 12 for blastx</text> <text lang=\"en\">- 13 for tblastn and tblastx</text> </comment>"
                    }, 
                    "dropoff_extent": {
                        "prompt": "X dropoff value for gapped alignment (-X)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -X $value\" : \"\"", 
                            "python": "(\"\" , \" -X \"+str(value))[value is not None]"
                        }, 
                        "comment": "<text lang=\"en\">This is the value that control the path graph region explored by Blast during a gapped extension (Xg in the NAR paper) (default for blastp is 15).</text> <text lang=\"en\">Default values:</text> <text lang=\"en\">- 30 for blastn</text> <text lang=\"en\">- 0 for tblastx</text> <text lang=\"en\">- 15 for others</text> </comment>"
                    }, 
                    "dropoff_final": {
                        "prompt": "X dropoff value for final alignment gapped alignment (-Z)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -Z $value\" : \"\"", 
                            "python": "(\"\" , \" -Z \"+str(value))[value is not None]"
                        }, 
                        "comment": "<text lang=\"en\">Default values:</text> <text lang=\"en\">- 50 for blastn</text> <text lang=\"en\">- 0 for tblastx</text> <text lang=\"en\">- 25 for others</text> </comment>"
                    }, 
                    "eff_len": {
                        "prompt": "Effective length of the search space (-Y)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -Y $value\" : \"\"", 
                            "python": "(\"\" , \" -Y \"+str(value))[value is not None]"
                        }, 
                        "comment": "<text lang=\"en\">Use zero for the real size</text> </comment>"
                    }, 
                    "keep_hits": {
                        "prompt": "Number of best hits from a region to keep (-K)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \" -K $value\" : \"\"", 
                            "python": "(\"\" , \" -K \"+str(value))[value is not None]"
                        }, 
                        "comment": "<text lang=\"en\">If this option is used, a value of 100 is recommended.</text> </comment>"
                    }, 
                    "gapped_alig": {
                        "prompt": "Perform or not gapped alignment (not available with tblastx) (-g)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "precond": {
                            "perl": "$blast2 ne \"tblastx\"", 
                            "python": "blast2 != \"tblastx\""
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "format": {
                            "perl": "($value) ? \"\" : \" -g F \"", 
                            "python": "(\" -g F \" , \"\")[value]"
                        }
                    }, 
                    "mode": {
                        "prompt": "Single-hit or multiple-hit mode (-P)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "precond": {
                            "perl": "$blast2 ne \"blastn\"", 
                            "python": "blast2 != \"blastn\""
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "authorized_values": [
                            {
                                "value": "0", 
                                "label": "Multiple-hit (0)"
                            }, 
                            {
                                "value": "1", 
                                "label": "Single-hit (1)"
                            }
                        ], 
                        "format": {
                            "perl": "($value ne \"0\") ? \" -P $value\" : \"\"", 
                            "python": "(\"\" , \" -P \"+str(value))[value != \"0\"]"
                        }
                    }
                }
            }, 
            "translation_opt": {
                "name": "translation_opt", 
                "parameters": {
                    "gc_query": {
                        "prompt": "Genetic code used for query translation (-Q)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "precond": {
                            "perl": "$blast2 =~ /^t?blastx$/", 
                            "python": "blast2 in [ \"blastx\" , \"tblastx\" ]"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "authorized_values": [
                            {
                                "value": "1", 
                                "label": "Standard (1)"
                            }, 
                            {
                                "value": "2", 
                                "label": "Vertebrate Mitochondrial (2)"
                            }, 
                            {
                                "value": "3", 
                                "label": "Yeast Mitochondrial (3)"
                            }, 
                            {
                                "value": "4", 
                                "label": "Mold, Protozoan, Coelenterate Mitochondrial and Mycoplasma/Spiroplasma (4)"
                            }, 
                            {
                                "value": "5", 
                                "label": "Invertebrate Mitochondrial (5)"
                            }, 
                            {
                                "value": "6", 
                                "label": "Ciliate Macronuclear and Dasycladacean (6)"
                            }, 
                            {
                                "value": "9", 
                                "label": "Echinoderm Mitochondrial (9)"
                            }, 
                            {
                                "value": "10", 
                                "label": "Euplotid Nuclear (10)"
                            }, 
                            {
                                "value": "11", 
                                "label": "Bacterial (11)"
                            }, 
                            {
                                "value": "12", 
                                "label": "Alternative Yeast Nuclear (12)"
                            }, 
                            {
                                "value": "13", 
                                "label": "Ascidian Mitochondrial (13)"
                            }, 
                            {
                                "value": "14", 
                                "label": "Flatworm Mitochondrial (14)"
                            }, 
                            {
                                "value": "15", 
                                "label": "Blepharisma Macronuclear (15)"
                            }
                        ], 
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -Q $value\" : \"\"", 
                            "python": "(\"\" , \" -Q \"+str(value))[value is not None and value != vdef]"
                        }
                    }, 
                    "gc_db": {
                        "prompt": "Genetic code used for database translation (-D)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "precond": {
                            "perl": "$blast2 =~ /^tblast[nx]$/", 
                            "python": "blast2 in [ \"tblastn\", \"tblastx\" ]"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "authorized_values": [
                            {
                                "value": "1", 
                                "label": "Standard (1)"
                            }, 
                            {
                                "value": "2", 
                                "label": "Vertebrate Mitochondrial (2)"
                            }, 
                            {
                                "value": "3", 
                                "label": "Yeast Mitochondrial (3)"
                            }, 
                            {
                                "value": "4", 
                                "label": "Mold, Protozoan, Coelenterate Mitochondrial and Mycoplasma/Spiroplasma (4)"
                            }, 
                            {
                                "value": "5", 
                                "label": "Invertebrate Mitochondrial (5)"
                            }, 
                            {
                                "value": "6", 
                                "label": "Ciliate Macronuclear and Dasycladacean (6)"
                            }, 
                            {
                                "value": "9", 
                                "label": "Echinoderm Mitochondrial (9)"
                            }, 
                            {
                                "value": "10", 
                                "label": "Euplotid Nuclear (10)"
                            }, 
                            {
                                "value": "11", 
                                "label": "Bacterial (11)"
                            }, 
                            {
                                "value": "12", 
                                "label": "Alternative Yeast Nuclear (12)"
                            }, 
                            {
                                "value": "13", 
                                "label": "Ascidian Mitochondrial (13)"
                            }, 
                            {
                                "value": "14", 
                                "label": "Flatworm Mitochondrial (14)"
                            }, 
                            {
                                "value": "15", 
                                "label": "Blepharisma Macronuclear (15)"
                            }
                        ], 
                        "format": {
                            "perl": "($value ne $vdef) ? \" -D $value\" : \"\"", 
                            "python": "(\"\" , \" -D \"+str(value))[value != vdef]"
                        }
                    }, 
                    "strand": {
                        "prompt": "Query strands to search against database (-S)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "precond": {
                            "perl": "$blast2 =~ /^(blastn|t?blastx)$/", 
                            "python": "blast2 in [ \"blastn\" ,\"blastx\" , \"tblastx\" ]"
                        }, 
                        "default_value": [
                            "3"
                        ], 
                        "authorized_values": [
                            {
                                "value": "1", 
                                "label": "Top (1)"
                            }, 
                            {
                                "value": "2", 
                                "label": "Bottom (2)"
                            }, 
                            {
                                "value": "3", 
                                "label": "Both (3)"
                            }
                        ], 
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -S $value\" : \"\"", 
                            "python": "(\"\" , \" -S \"+str(value))[value is not None and value != vdef]"
                        }
                    }
                }
            }, 
            "affichage": {
                "name": "affichage", 
                "parameters": {
                    "Descriptions": {
                        "prompt": "Number of one-line descriptions to show (-v)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "default_value": [
                            "500"
                        ], 
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -v $value\" : \"\"", 
                            "python": "(\"\" , \" -v \"+str(value))[value is not None and value != vdef]"
                        }, 
                        "comment": "<text lang=\"en\">Maximum number of database sequences for which one-line descriptions will be reported.</text> </comment>"
                    }, 
                    "Alignments": {
                        "prompt": "Number of database sequences to show alignments (-b)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "default_value": [
                            "250"
                        ], 
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \" -b $value\" : \"\"", 
                            "python": "(\"\" , \" -b \"+str(value))[value is not None and value != vdef]"
                        }, 
                        "comment": "<text lang=\"en\">Maximum number of database sequences for which high-scoring segment pairs will be reported (-b).</text> </comment>"
                    }, 
                    "view_alignments": {
                        "prompt": "Alignment view options (-m)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "authorized_values": [
                            {
                                "value": "0", 
                                "label": "Pairwise (0)"
                            }, 
                            {
                                "value": "1", 
                                "label": "Query-anchored showing identities (1)"
                            }, 
                            {
                                "value": "2", 
                                "label": "Query-anchored no identities (2)"
                            }, 
                            {
                                "value": "3", 
                                "label": "Flat query-anchored, show identities (3)"
                            }, 
                            {
                                "value": "4", 
                                "label": "Flat query-anchored, no identities (5)"
                            }, 
                            {
                                "value": "5", 
                                "label": "Query-anchored no identities and blunt ends (5)"
                            }, 
                            {
                                "value": "6", 
                                "label": "Flat query-anchored, no identities and blunt ends (6)"
                            }, 
                            {
                                "value": "7", 
                                "label": "XML Blast output (7)"
                            }, 
                            {
                                "value": "8", 
                                "label": "Tabular output (8)"
                            }
                        ], 
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \" -m $value\" : \"\"", 
                            "python": "(\"\" , \" -m \"+str(value))[value is not None and value != vdef]"
                        }
                    }, 
                    "txtoutput": {
                        "ishidden": true, 
                        "prompt": "Text output file", 
                        "type": {
                            "datatype_class": "String"
                        }, 
                        "precond": {
                            "perl": "$view_alignments ne \"7\"", 
                            "python": "view_alignments != \"7\""
                        }, 
                        "format": {
                            "perl": "\" -o blast2.txt\"", 
                            "python": "\" -o blast2.txt\""
                        }
                    }, 
                    "xmloutput": {
                        "ishidden": true, 
                        "prompt": "Xml output file", 
                        "type": {
                            "datatype_class": "String"
                        }, 
                        "precond": {
                            "perl": "$view_alignments eq \"7\"", 
                            "python": "view_alignments == \"7\""
                        }, 
                        "format": {
                            "perl": "\" -o blast2.xml\"", 
                            "python": "\" -o blast2.xml\""
                        }
                    }, 
                    "htmloutput": {
                        "prompt": "Html output", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "precond": {
                            "perl": "$view_alignments !~ /^[78]$/", 
                            "python": "view_alignments not in [ \"7\" , \"8\" ]"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "format": {
                            "perl": " html4blast -g -o blast2.html blast2.txt\" : \"\"", 
                            "python": " html4blast -g -o blast2.html blast2.txt\")[value]"
                        }
                    }
                }
            }
        }
    }, 
    "outputs": {
        "parameters": {
            "txtfile": {
                "isout": true, 
                "prompt": "Blast text report", 
                "type": {
                    "datatype_class": "BlastTextReport", 
                    "datatype_superclass": "Report"
                }, 
                "precond": {
                    "perl": "$view_alignments ne \"7\"", 
                    "python": "view_alignments != \"7\""
                }, 
                "filenames": {
                    "perl": "\"blast2.txt\"", 
                    "python": "\"blast2.txt\""
                }
            }, 
            "xmlfile": {
                "isout": true, 
                "prompt": "Blast xml report", 
                "type": {
                    "datatype_class": "BlastXmlReport", 
                    "datatype_superclass": "Report"
                }, 
                "precond": {
                    "perl": "$view_alignments eq \"7\"", 
                    "python": "view_alignments == \"7\""
                }, 
                "filenames": {
                    "perl": "\"blast2.xml\"", 
                    "python": "\"blast2.xml\""
                }
            }, 
            "htmlfile": {
                "isout": true, 
                "prompt": "Blast html report", 
                "type": {
                    "datatype_class": "BlastHtmlReport", 
                    "datatype_superclass": "Report"
                }, 
                "precond": {
                    "perl": "$view_alignments !~ /^[78]$/", 
                    "python": "view_alignments not in [ \"7\" , \"8\" ]"
                }, 
                "filenames": {
                    "perl": "\"blast2.html\"", 
                    "python": "\"blast2.html\""
                }
            }, 
            "imgfile": {
                "isout": true, 
                "ishidden": true, 
                "type": {
                    "datatype_class": "Picture", 
                    "datatype_superclass": "Binary"
                }, 
                "precond": {
                    "perl": "$view_alignments !~ /^[78]$/", 
                    "python": "view_alignments not in [\"7\", \"8\"]"
                }, 
                "filenames": {
                    "perl": "\"*.gif\"", 
                    "python": "\"*.gif\""
                }
            }
        }
    }, 
    "comment": "<{http://www.w3.org/1999/xhtml}div >This tool reorders the entries of an MSA according to a reference set of sequences.</{http://www.w3.org/1999/xhtml}div> </comment>"
}