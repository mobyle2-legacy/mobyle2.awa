{
    "type": "program", 
    "name": "dan", 
    "version": "6.3.1", 
    "title": "dan", 
    "description": "<text lang=\"en\">Calculates nucleic acid melting temperature</text> </description>", 
    "authors": "Rice,P. Longden,I. and Bleasby, A.</authors>", 
    "references": [
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Larget, B. and D. Simon (1999). Markov chain Monte Carlo algorithms for the Bayesian analysis of phylogenetic trees. Molecular Biology and Evolution 16:750-759.</reference>"
        }, 
        {
            "value": "Simon, D. and B. Larget. 1998. Bayesian analysis in molecular biology and evolution (BAMBE), version 1.01 beta. Department of Mathematics and Computer Science, Duquesne University.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Gascuel O., 1997, BIONJ: an improved version of the NJ algorithm based on a simple model of sequence data, Molecular Biology and Evolution 14(7):685-695</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer,Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.</reference>"
        }, 
        {
            "value": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer, Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.</reference>"
        }, 
        {
            "value": "Criscuolo A, Gribaldo S (2010) BMGE (Block Mapping and Gathering with Entropy): selection of phylogenetic informative regions from multiple sequence alignments. BMC Evolutionary Biology 10:210. </reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Huang, X. and Madan, A. (1999) CAP3: A DNA Sequence Assembly Program. Genome Research, 9: 868-877.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Christian N. S. Pedersen, Rune B. Lyngso and Jotun Hein. Comparison of coding DNA in Proceedings of the 9th Annual Symposium of Combinatorial Pattern Matching (CPM), 1998.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "G.Z. Hertz and G.D. Stormo. Identification of consensus patterns in unaligned DNA and protein sequences: a large-deviation statistical basis for penalizing gaps. In: Proceedings of the Third International Conference on Bioinformatics and Genome Research (H.A. Lim, and C.R. Cantor, editors). World Scientific Publishing Co., Ltd. Singapore, 1995. pages 201--216.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }
    ], 
    "sourcelinks": [
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net/download", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net/download", 
        "https://projets.pasteur.fr/projects/list_files/blast2usa", 
        "ftp://ftp.pasteur.fr/pub/gensoft/projects/BMGE/", 
        "ftp://www.isrec.isb-sib.ch/pub/software/unix/boxshade/", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://seq.cs.iastate.edu/cap3.html", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://sourceforge.net/projects/codonw/files/", 
        "http://www.daimi.au.dk/~ocaprani/ComAlign/programs/", 
        "http://www.daimi.au.dk/~cstorm/combat/", 
        "http://emboss.sourceforge.net/download", 
        "http://gzhertz.home.comcast.net/~gzhertz/CONSENSUS_2004-04-14.TAR.gz", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download"
    ], 
    "homepagelinks": [
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net", 
        "https://projets.pasteur.fr/projects/show/blast2usa", 
        "http://www.ch.embnet.org/software/BOX_form.html", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://seq.cs.iastate.edu/", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://codonw.sourceforge.net/", 
        "http://www.daimi.au.dk/~ocaprani/ComAlign/ComAlign.html", 
        "http://www.daimi.au.dk/~cstorm/combat/", 
        "http://emboss.sourceforge.net", 
        "http://gzhertz.home.comcast.net/~gzhertz/", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net"
    ], 
    "doclinks": [
        "http://bioweb2.pasteur.fr/docs/EMBOSS/abiview.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/antigenic.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranambig.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/banana.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/biosed.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", 
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html", 
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", 
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html", 
        "http://bioweb2.pasteur.fr/docs/BMGE/BMGE_doc.pdf", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/btwisted.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cai.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/chaos.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/charge.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/checktrans.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/chips.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/cif/cif.html", 
        "http://bioweb2.pasteur.fr/docs/cif/compatible_cohesive_ends.txt", 
        "http://bioweb2.pasteur.fr/docs/cif/paillasse_liste.txt", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cirdna.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/clique.html", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/codcmp.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://serpico.rennes.inria.fr/doku.php?id=software:nd-safir:index", 
        "http://serpico.rennes.inria.fr/doku.php?id=software:nd-safir:index", 
        "http://serpico.rennes.inria.fr/doku.php?id=software:nd-safir:index", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/coderet.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://codonw.sourceforge.net/Readme.html", 
        "http://codonw.sourceforge.net/Tutorial.html", 
        "http://www.daimi.au.dk/~ocaprani/ComAlign/HowTo.html", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/compseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/consense.html", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cons.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cpgplot.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cpgreport.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cusp.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cutseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/dan.html", 
        "http://emboss.sourceforge.net/docs/themes"
    ], 
    "mobyle_cats": [
        "display", 
        "alignment:formatter", 
        "sequence:protein:motifs", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "phylogeny:bayesian", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "phylogeny:distance", 
        "sequence:edit", 
        "alignment:pairwise", 
        "database:search:filter", 
        "database:search:homology", 
        "database:search:display", 
        "database:search:filter", 
        "database:search:display", 
        "database:search:homology", 
        "alignment:multiple:information", 
        "alignment:multiple:display", 
        "sequence:nucleic:composition", 
        "sequence:nucleic:codon_usage", 
        "assembly:assembly", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "sequence:protein:composition", 
        "sequence:nucleic:codon_usage", 
        "sequence:enzyme:analysis", 
        "sequence:nucleic:restriction", 
        "display:nucleic:restriction", 
        "display", 
        "phylogeny:others", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "sequence:nucleic:codon_usage", 
        "Bio-Imaging", 
        "Bio-Imaging", 
        "Bio-Imaging", 
        "sequence:nucleic:edit", 
        "sequence:nucleic:codon_usage", 
        "alignment:multiple", 
        "alignment:pairwise", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "sequence:formatter", 
        "phylogeny:tree_analyser", 
        "sequence:protein:pattern", 
        "sequence:nucleic:pattern", 
        "alignment:consensus", 
        "alignment:structure", 
        "structure:indexing", 
        "sequence:nucleic:cpg_islands", 
        "sequence:nucleic:cpg_islands", 
        "sequence:nucleic:codon_usage", 
        "sequence:edit", 
        "sequence:nucleic:composition"
    ], 
    "command": "dan", 
    "inputs": {
        "parameters": {
            "e_input": {
                "name": "e_input", 
                "parameters": {
                    "e_sequence": {
                        "ismandatory": true, 
                        "prompt": "sequence option", 
                        "type": {
                            "biotype": "DNA", 
                            "datatype_class": "Sequence", 
                            "data_formats": [
                                "EMBL", 
                                "FASTA", 
                                "GCG", 
                                "GENBANK", 
                                "NBRF", 
                                "PIR", 
                                "RAW", 
                                "SWISSPROT", 
                                "GFF"
                            ], 
                            "card": "1,n"
                        }, 
                        "format": {
                            "python": "(\"\", \" -sequence=\" + str(value))[value is not None]"
                        }
                    }
                }
            }, 
            "e_required": {
                "name": "e_required", 
                "parameters": {
                    "e_windowsize": {
                        "ismandatory": true, 
                        "prompt": "Enter window size (value from 1 to 100)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "default_value": [
                            "20"
                        ], 
                        "format": {
                            "python": "(\"\", \" -windowsize=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 100"
                        }, 
                        "comment": "<text lang=\"en\">The values of melting point and other thermodynamic properties of the sequence are determined by taking a short length of sequence known as a window and determining the properties of the sequence in that window. The window is incrementally moved along the sequence with the properties being calculated at each new position.</text> </comment>"
                    }, 
                    "e_shiftincrement": {
                        "ismandatory": true, 
                        "prompt": "Enter shift increment (value greater than or equal to 1)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "format": {
                            "python": "(\"\", \" -shiftincrement=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 1"
                        }, 
                        "comment": "<text lang=\"en\">This is the amount by which the window is moved at each increment in order to find the melting point and other properties along the sequence.</text> </comment>"
                    }, 
                    "e_dnaconc": {
                        "ismandatory": true, 
                        "prompt": "Enter dna concentration (nm) (value from 1. to 100000.)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "50."
                        ], 
                        "format": {
                            "python": "(\"\", \" -dnaconc=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 100000."
                        }
                    }, 
                    "e_saltconc": {
                        "ismandatory": true, 
                        "prompt": "Enter salt concentration (mm) (value from 1. to 1000.)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "50."
                        ], 
                        "format": {
                            "python": "(\"\", \" -saltconc=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 1000."
                        }
                    }
                }
            }, 
            "e_additional": {
                "name": "e_additional", 
                "parameters": {
                    "e_productsection": {
                        "name": "e_productsection", 
                        "parameters": {
                            "e_product": {
                                "prompt": "Prompt for product values", 
                                "type": {
                                    "datatype_class": "Boolean"
                                }, 
                                "default_value": [
                                    "0"
                                ], 
                                "format": {
                                    "python": "(\"\", \" -product\")[ bool(value) ]"
                                }, 
                                "comment": "<text lang=\"en\">This prompts for percent formamide, percent of mismatches allowed and product length.</text> </comment>"
                            }, 
                            "e_formamide": {
                                "prompt": "Enter percentage of formamide (value from 0. to 100.)", 
                                "type": {
                                    "datatype_class": "Float"
                                }, 
                                "precond": {
                                    "python": "e_product"
                                }, 
                                "default_value": [
                                    "0."
                                ], 
                                "format": {
                                    "python": "(\"\", \" -formamide=\" + str(value))[value is not None and value!=vdef]"
                                }, 
                                "ctrl": {
                                    "python": "= 100."
                                }, 
                                "comment": "<text lang=\"en\">This specifies the percent formamide to be used in calculations (it is ignored unless -product is used).</text> </comment>"
                            }, 
                            "e_mismatch": {
                                "prompt": "Enter percent mismatch (value from 0. to 100.)", 
                                "type": {
                                    "datatype_class": "Float"
                                }, 
                                "precond": {
                                    "python": "e_product"
                                }, 
                                "default_value": [
                                    "0."
                                ], 
                                "format": {
                                    "python": "(\"\", \" -mismatch=\" + str(value))[value is not None and value!=vdef]"
                                }, 
                                "ctrl": {
                                    "python": "= 100."
                                }, 
                                "comment": "<text lang=\"en\">This specifies the percent mismatch to be used in calculations (it is ignored unless -product is used).</text> </comment>"
                            }, 
                            "e_prodlen": {
                                "prompt": "Enter the product length", 
                                "type": {
                                    "datatype_class": "Integer"
                                }, 
                                "precond": {
                                    "python": "e_product and e_windowsize"
                                }, 
                                "format": {
                                    "python": "(\"\", \" -prodlen=\" + str(value))[value is not None]"
                                }, 
                                "comment": "<text lang=\"en\">This specifies the product length to be used in calculations (it is ignored unless -product is used).</text> </comment>"
                            }
                        }
                    }, 
                    "e_thermosection": {
                        "name": "e_thermosection", 
                        "parameters": {
                            "e_thermo": {
                                "prompt": "Thermodynamic calculations", 
                                "type": {
                                    "datatype_class": "Boolean"
                                }, 
                                "default_value": [
                                    "0"
                                ], 
                                "format": {
                                    "python": "(\"\", \" -thermo\")[ bool(value) ]"
                                }, 
                                "comment": "<text lang=\"en\">Output the DeltaG, DeltaH and DeltaS values of the sequence windows to the output data file.</text> </comment>"
                            }, 
                            "e_temperature": {
                                "prompt": "Enter temperature (value from 0. to 100.)", 
                                "type": {
                                    "datatype_class": "Float"
                                }, 
                                "precond": {
                                    "python": "e_thermo"
                                }, 
                                "default_value": [
                                    "25."
                                ], 
                                "format": {
                                    "python": "(\"\", \" -temperature=\" + str(value))[value is not None and value!=vdef]"
                                }, 
                                "ctrl": {
                                    "python": "= 100."
                                }, 
                                "comment": "<text lang=\"en\">If -thermo has been specified then this specifies the temperature at which to calculate the DeltaG, DeltaH and DeltaS values.</text> </comment>"
                            }
                        }
                    }
                }
            }, 
            "e_advanced": {
                "name": "e_advanced", 
                "parameters": {
                    "e_rna": {
                        "prompt": "Use rna data values", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "python": "(\"\", \" -rna\")[ bool(value) ]"
                        }, 
                        "comment": "<text lang=\"en\">This specifies that the sequence is an RNA sequence and not a DNA sequence.</text> </comment>"
                    }
                }
            }, 
            "e_output": {
                "name": "e_output", 
                "parameters": {
                    "e_plot": {
                        "prompt": "Produce a plot", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "python": "(\"\", \" -plot\")[ bool(value) ]"
                        }, 
                        "comment": "<text lang=\"en\">If this is not specified then the file of output data is produced, else a plot of the melting point along the sequence is produced.</text> </comment>"
                    }, 
                    "e_mintemp": {
                        "prompt": "Enter minimum temperature (value from 0. to 150.)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "precond": {
                            "python": "e_plot"
                        }, 
                        "default_value": [
                            "55."
                        ], 
                        "format": {
                            "python": "(\"\", \" -mintemp=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 150."
                        }, 
                        "comment": "<text lang=\"en\">Enter a minimum value for the temperature scale (y-axis) of the plot.</text> </comment>"
                    }, 
                    "e_graph": {
                        "prompt": "Choose the e_graph output format", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "precond": {
                            "python": "e_plot"
                        }, 
                        "default_value": [
                            "png"
                        ], 
                        "authorized_values": [
                            {
                                "value": "png", 
                                "label": "Png"
                            }, 
                            {
                                "value": "gif", 
                                "label": "Gif"
                            }, 
                            {
                                "value": "cps", 
                                "label": "Cps"
                            }, 
                            {
                                "value": "ps", 
                                "label": "Ps"
                            }, 
                            {
                                "value": "meta", 
                                "label": "Meta"
                            }, 
                            {
                                "value": "data", 
                                "label": "Data"
                            }
                        ], 
                        "format": {
                            "python": "(\" -graph=\" + str(vdef), \" -graph=\" + str(value))[value is not None and value!=vdef]"
                        }
                    }, 
                    "xy_goutfile": {
                        "prompt": "Name of the output graph", 
                        "type": {
                            "datatype_class": "Filename"
                        }, 
                        "precond": {
                            "python": "e_plot"
                        }, 
                        "default_value": [
                            "dan_xygraph"
                        ], 
                        "format": {
                            "python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"
                        }
                    }, 
                    "e_outfile": {
                        "prompt": "Name of the report file", 
                        "type": {
                            "datatype_class": "Filename"
                        }, 
                        "precond": {
                            "python": "not e_plot"
                        }, 
                        "default_value": [
                            "dan.report"
                        ], 
                        "format": {
                            "python": "(\"\" , \" -outfile=\" + str(value))[value is not None]"
                        }, 
                        "comment": "<text lang=\"en\">If a plot is not being produced then data on the melting point etc. in each window along the sequence is output to the file.</text> </comment>"
                    }, 
                    "e_rformat_outfile": {
                        "prompt": "Choose the report output format", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "precond": {
                            "python": "not e_plot"
                        }, 
                        "default_value": [
                            "SEQTABLE"
                        ], 
                        "authorized_values": [
                            {
                                "value": "DASGFF", 
                                "label": "Dasgff"
                            }, 
                            {
                                "value": "DBMOTIF", 
                                "label": "Dbmotif"
                            }, 
                            {
                                "value": "DIFFSEQ", 
                                "label": "Diffseq"
                            }, 
                            {
                                "value": "EMBL", 
                                "label": "Embl"
                            }, 
                            {
                                "value": "EXCEL", 
                                "label": "Excel"
                            }, 
                            {
                                "value": "FEATTABLE", 
                                "label": "Feattable"
                            }, 
                            {
                                "value": "GENBANK", 
                                "label": "Genbank"
                            }, 
                            {
                                "value": "GFF", 
                                "label": "Gff"
                            }, 
                            {
                                "value": "LISTFILE", 
                                "label": "Listfile"
                            }, 
                            {
                                "value": "MOTIF", 
                                "label": "Motif"
                            }, 
                            {
                                "value": "NAMETABLE", 
                                "label": "Nametable"
                            }, 
                            {
                                "value": "PIR", 
                                "label": "Pir"
                            }, 
                            {
                                "value": "REGIONS", 
                                "label": "Regions"
                            }, 
                            {
                                "value": "SEQTABLE", 
                                "label": "Seqtable"
                            }, 
                            {
                                "value": "SIMPLE", 
                                "label": "Simple"
                            }, 
                            {
                                "value": "SRS", 
                                "label": "Srs"
                            }, 
                            {
                                "value": "SWISS", 
                                "label": "Swiss"
                            }, 
                            {
                                "value": "TABLE", 
                                "label": "Table"
                            }, 
                            {
                                "value": "TAGSEQ", 
                                "label": "Tagseq"
                            }
                        ], 
                        "format": {
                            "python": "(\"\", \" -rformat=\" + str(value))[value is not None and value!=vdef]"
                        }
                    }
                }
            }, 
            "auto": {
                "ishidden": true, 
                "prompt": "Turn off any prompting", 
                "type": {
                    "datatype_class": "String"
                }, 
                "format": {
                    "python": "\" -auto -stdout\""
                }
            }
        }
    }, 
    "outputs": {
        "parameters": {
            "e_output": {
                "name": "e_output", 
                "parameters": {
                    "xy_outgraph_png": {
                        "isout": true, 
                        "prompt": "Graph file", 
                        "type": {
                            "datatype_class": "Picture", 
                            "datatype_superclass": "Binary"
                        }, 
                        "precond": {
                            "python": "e_plot and e_graph == \"png\""
                        }, 
                        "filenames": {
                            "python": "\"*.png\""
                        }
                    }, 
                    "xy_outgraph_gif": {
                        "isout": true, 
                        "prompt": "Graph file", 
                        "type": {
                            "datatype_class": "Picture", 
                            "datatype_superclass": "Binary"
                        }, 
                        "precond": {
                            "python": "e_plot and e_graph == \"gif\""
                        }, 
                        "filenames": {
                            "python": "\"*.gif\""
                        }
                    }, 
                    "xy_outgraph_ps": {
                        "isout": true, 
                        "prompt": "Graph file", 
                        "type": {
                            "datatype_class": "PostScript", 
                            "datatype_superclass": "Binary"
                        }, 
                        "precond": {
                            "python": "e_plot and e_graph == \"ps\" or e_graph == \"cps\""
                        }, 
                        "filenames": {
                            "python": "\"*.ps\""
                        }
                    }, 
                    "xy_outgraph_meta": {
                        "isout": true, 
                        "prompt": "Graph file", 
                        "type": {
                            "datatype_class": "Picture", 
                            "datatype_superclass": "Binary"
                        }, 
                        "precond": {
                            "python": "e_plot and e_graph == \"meta\""
                        }, 
                        "filenames": {
                            "python": "\"*.meta\""
                        }
                    }, 
                    "xy_outgraph_data": {
                        "isout": true, 
                        "prompt": "Graph file", 
                        "type": {
                            "datatype_class": "Text"
                        }, 
                        "precond": {
                            "python": "e_plot and e_graph == \"data\""
                        }, 
                        "filenames": {
                            "python": "\"*.dat\""
                        }
                    }, 
                    "e_outfile_out": {
                        "isout": true, 
                        "prompt": "outfile_out option", 
                        "type": {
                            "datatype_class": "Text", 
                            "data_formats": [
                                "\n              ", 
                                "\n            "
                            ]
                        }, 
                        "precond": {
                            "python": "e_rformat_outfile in ['DASGFF', 'DBMOTIF', 'DIFFSEQ', 'EMBL', 'EXCEL', 'FEATTABLE', 'GENBANK', 'GFF', 'LISTFILE', 'MOTIF', 'NAMETABLE', 'PIR', 'REGIONS', 'SEQTABLE', 'SIMPLE', 'SRS', 'SWISS', 'TABLE', 'TAGSEQ']"
                        }, 
                        "filenames": {
                            "python": "e_outfile"
                        }
                    }
                }
            }
        }
    }, 
    "comment": "<text lang=\"en\">This program gives simple statistics about residue conservation from clustal output files.</text> <text lang=\"en\">There is the possibility to redirect the residue frequency at every position of the protein </text> <text lang=\"en\">sequence in the PDB file corresponding to one of the identified sequences of the multiple alignment.</text> <text lang=\"en\">This frequency or conservation index is put in place of B-factors and allows spectral coloring according to</text> <text lang=\"en\">the index value in most of pdb structure viewers.</text> </comment>"
}