{
    "type": "program", 
    "name": "cirdna", 
    "version": "6.3.1", 
    "title": "cirdna", 
    "description": "<text lang=\"en\">Draws circular maps of DNA constructs</text> </description>", 
    "authors": "Rice,P. Longden,I. and Bleasby, A.</authors>", 
    "references": [
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Larget, B. and D. Simon (1999). Markov chain Monte Carlo algorithms for the Bayesian analysis of phylogenetic trees. Molecular Biology and Evolution 16:750-759.</reference>"
        }, 
        {
            "value": "Simon, D. and B. Larget. 1998. Bayesian analysis in molecular biology and evolution (BAMBE), version 1.01 beta. Department of Mathematics and Computer Science, Duquesne University.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Gascuel O., 1997, BIONJ: an improved version of the NJ algorithm based on a simple model of sequence data, Molecular Biology and Evolution 14(7):685-695</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer,Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.</reference>"
        }, 
        {
            "value": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer, Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.</reference>"
        }, 
        {
            "value": "Criscuolo A, Gribaldo S (2010) BMGE (Block Mapping and Gathering with Entropy): selection of phylogenetic informative regions from multiple sequence alignments. BMC Evolutionary Biology 10:210. </reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Huang, X. and Madan, A. (1999) CAP3: A DNA Sequence Assembly Program. Genome Research, 9: 868-877.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }
    ], 
    "sourcelinks": [
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net/download", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net/download", 
        "https://projets.pasteur.fr/projects/list_files/blast2usa", 
        "ftp://ftp.pasteur.fr/pub/gensoft/projects/BMGE/", 
        "ftp://www.isrec.isb-sib.ch/pub/software/unix/boxshade/", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://seq.cs.iastate.edu/cap3.html", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download"
    ], 
    "homepagelinks": [
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net", 
        "https://projets.pasteur.fr/projects/show/blast2usa", 
        "http://www.ch.embnet.org/software/BOX_form.html", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://seq.cs.iastate.edu/", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net"
    ], 
    "doclinks": [
        "http://bioweb2.pasteur.fr/docs/EMBOSS/abiview.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/antigenic.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranambig.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/banana.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/biosed.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", 
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html", 
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", 
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html", 
        "http://bioweb2.pasteur.fr/docs/BMGE/BMGE_doc.pdf", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/btwisted.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cai.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/chaos.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/charge.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/checktrans.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/chips.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/cif/cif.html", 
        "http://bioweb2.pasteur.fr/docs/cif/compatible_cohesive_ends.txt", 
        "http://bioweb2.pasteur.fr/docs/cif/paillasse_liste.txt", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cirdna.html", 
        "http://emboss.sourceforge.net/docs/themes"
    ], 
    "mobyle_cats": [
        "display", 
        "alignment:formatter", 
        "sequence:protein:motifs", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "phylogeny:bayesian", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "phylogeny:distance", 
        "sequence:edit", 
        "alignment:pairwise", 
        "database:search:filter", 
        "database:search:homology", 
        "database:search:display", 
        "database:search:filter", 
        "database:search:display", 
        "database:search:homology", 
        "alignment:multiple:information", 
        "alignment:multiple:display", 
        "sequence:nucleic:composition", 
        "sequence:nucleic:codon_usage", 
        "assembly:assembly", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "sequence:protein:composition", 
        "sequence:nucleic:codon_usage", 
        "sequence:enzyme:analysis", 
        "sequence:nucleic:restriction", 
        "display:nucleic:restriction", 
        "display"
    ], 
    "command": "cirdna", 
    "inputs": {
        "parameters": {
            "e_input": {
                "name": "e_input", 
                "parameters": {
                    "e_infile": {
                        "ismandatory": true, 
                        "prompt": "Commands to the cirdna drawing program file", 
                        "type": {
                            "datatype_class": "cirdnaMappingCommands", 
                            "datatype_superclass": "AbstractText"
                        }, 
                        "format": {
                            "python": "(\"\", \" -infile=\" + str(value))[value is not None ]"
                        }
                    }
                }
            }, 
            "e_additional": {
                "name": "e_additional", 
                "parameters": {
                    "e_maxgroups": {
                        "prompt": "Maximum number of groups (value greater than or equal to 1)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "default_value": [
                            "20"
                        ], 
                        "format": {
                            "python": "(\"\", \" -maxgroups=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 1"
                        }
                    }, 
                    "e_maxlabels": {
                        "prompt": "Maximum number of labels (value greater than or equal to 1)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "default_value": [
                            "10000"
                        ], 
                        "format": {
                            "python": "(\"\", \" -maxlabels=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 1"
                        }
                    }
                }
            }, 
            "e_output": {
                "name": "e_output", 
                "parameters": {
                    "e_ruler": {
                        "prompt": "Draw a ruler", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "format": {
                            "python": "(\" -noruler\", \"\")[ bool(value) ]"
                        }
                    }, 
                    "e_blocktype": {
                        "ismandatory": true, 
                        "prompt": "Type of blocks", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "Filled"
                        ], 
                        "authorized_values": [
                            {
                                "value": "Open", 
                                "label": "Open blocks"
                            }, 
                            {
                                "value": "Filled", 
                                "label": "Filled blocks"
                            }, 
                            {
                                "value": "Outline", 
                                "label": "Black border"
                            }
                        ], 
                        "format": {
                            "python": "(\"\", \" -blocktype=\" + str(value))[value is not None and value!=vdef]"
                        }
                    }, 
                    "e_originangle": {
                        "prompt": "Position in degrees of the molecule's origin on the circle (value from 0 to 360)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "90"
                        ], 
                        "format": {
                            "python": "(\"\", \" -originangle=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 360"
                        }
                    }, 
                    "e_posticks": {
                        "ismandatory": true, 
                        "prompt": "Ticks inside or outside the circle", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "2"
                        ], 
                        "authorized_values": [
                            {
                                "value": "1", 
                                "label": "In"
                            }, 
                            {
                                "value": "2", 
                                "label": "Out"
                            }
                        ], 
                        "format": {
                            "python": "(\"\", \" -posticks=\" + str(value))[value is not None and value!=vdef]"
                        }
                    }, 
                    "e_posblocks": {
                        "ismandatory": true, 
                        "prompt": "Text inside or outside the blocks", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "authorized_values": [
                            {
                                "value": "1", 
                                "label": "In"
                            }, 
                            {
                                "value": "2", 
                                "label": "Out"
                            }
                        ], 
                        "format": {
                            "python": "(\"\", \" -posblocks=\" + str(value))[value is not None and value!=vdef]"
                        }
                    }, 
                    "e_intersymbol": {
                        "prompt": "Horizontal junctions between blocks", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "format": {
                            "python": "(\" -nointersymbol\", \"\")[ bool(value) ]"
                        }
                    }, 
                    "e_intercolour": {
                        "prompt": "Colour of junctions between blocks (enter a colour number) (value from 0 to 15)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "format": {
                            "python": "(\"\", \" -intercolour=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 15"
                        }
                    }, 
                    "e_interticks": {
                        "prompt": "Horizontal junctions between ticks", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "python": "(\"\", \" -interticks\")[ bool(value) ]"
                        }
                    }, 
                    "e_gapsize": {
                        "prompt": "Interval between ticks in the ruler (value greater than or equal to 0)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "default_value": [
                            "500"
                        ], 
                        "format": {
                            "python": "(\"\", \" -gapsize=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 0"
                        }
                    }, 
                    "e_ticklines": {
                        "prompt": "Vertical lines at the ruler's ticks", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "python": "(\"\", \" -ticklines\")[ bool(value) ]"
                        }
                    }, 
                    "e_textheight": {
                        "prompt": "Text scale factor (value greater than or equal to 0.0)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "1.0"
                        ], 
                        "format": {
                            "python": "(\"\", \" -textheight=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 0.0"
                        }, 
                        "comment": "<text lang=\"en\">Height of text. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively</text> </comment>"
                    }, 
                    "e_textlength": {
                        "prompt": "Length of text multiplier (value greater than or equal to 0.0)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "1.0"
                        ], 
                        "format": {
                            "python": "(\"\", \" -textlength=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 0.0"
                        }, 
                        "comment": "<text lang=\"en\">Length of text. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively</text> </comment>"
                    }, 
                    "e_tickheight": {
                        "prompt": "Height of ticks multiplier (value greater than or equal to 0.0)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "1.0"
                        ], 
                        "format": {
                            "python": "(\"\", \" -tickheight=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 0.0"
                        }, 
                        "comment": "<text lang=\"en\">Height of ticks. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively</text> </comment>"
                    }, 
                    "e_blockheight": {
                        "prompt": "Height of blocks multiplier (value greater than or equal to 0.0)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "1.0"
                        ], 
                        "format": {
                            "python": "(\"\", \" -blockheight=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 0.0"
                        }, 
                        "comment": "<text lang=\"en\">Height of blocks. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively</text> </comment>"
                    }, 
                    "e_rangeheight": {
                        "prompt": "Height of range ends multiplier (value greater than or equal to 0.0)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "1.0"
                        ], 
                        "format": {
                            "python": "(\"\", \" -rangeheight=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 0.0"
                        }, 
                        "comment": "<text lang=\"en\">Height of range ends. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively</text> </comment>"
                    }, 
                    "e_gapgroup": {
                        "prompt": "Space between groups multiplier (value greater than or equal to 0.0)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "1.0"
                        ], 
                        "format": {
                            "python": "(\"\", \" -gapgroup=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 0.0"
                        }, 
                        "comment": "<text lang=\"en\">Space between groups. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively</text> </comment>"
                    }, 
                    "e_postext": {
                        "prompt": "Space between text and ticks, blocks, and ranges multiplier (value greater than or equal to 0.0)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "1.0"
                        ], 
                        "format": {
                            "python": "(\"\", \" -postext=\" + str(value))[value is not None and value!=vdef]"
                        }, 
                        "ctrl": {
                            "python": "= 0.0"
                        }, 
                        "comment": "<text lang=\"en\">Space between text and ticks, blocks, and ranges. Enter a number <1.0 or >1.0 to decrease or increase the size, respectively</text> </comment>"
                    }, 
                    "e_graphout": {
                        "ismandatory": true, 
                        "prompt": "Choose the e_graphout output format", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "png"
                        ], 
                        "authorized_values": [
                            {
                                "value": "png", 
                                "label": "Png"
                            }, 
                            {
                                "value": "gif", 
                                "label": "Gif"
                            }, 
                            {
                                "value": "cps", 
                                "label": "Cps"
                            }, 
                            {
                                "value": "ps", 
                                "label": "Ps"
                            }, 
                            {
                                "value": "meta", 
                                "label": "Meta"
                            }, 
                            {
                                "value": "data", 
                                "label": "Data"
                            }
                        ], 
                        "format": {
                            "python": "(\" -graphout=\" + str(vdef), \" -graphout=\" + str(value))[value is not None and value!=vdef]"
                        }
                    }, 
                    "e_goutfile": {
                        "prompt": "Name of the output graph", 
                        "type": {
                            "datatype_class": "Filename"
                        }, 
                        "default_value": [
                            "cirdna_graph"
                        ], 
                        "format": {
                            "python": "(\"\" , \" -goutfile=\" + str(value))[value is not None]"
                        }
                    }
                }
            }, 
            "auto": {
                "ishidden": true, 
                "prompt": "Turn off any prompting", 
                "type": {
                    "datatype_class": "String"
                }, 
                "format": {
                    "python": "\" -auto -stdout\""
                }
            }
        }
    }, 
    "outputs": {
        "parameters": {
            "e_output": {
                "name": "e_output", 
                "parameters": {
                    "outgraph_png": {
                        "isout": true, 
                        "prompt": "Graph file", 
                        "type": {
                            "datatype_class": "Picture", 
                            "datatype_superclass": "Binary"
                        }, 
                        "precond": {
                            "python": "e_graphout == \"png\""
                        }, 
                        "filenames": {
                            "python": "\"*.png\""
                        }
                    }, 
                    "outgraph_gif": {
                        "isout": true, 
                        "prompt": "Graph file", 
                        "type": {
                            "datatype_class": "Picture", 
                            "datatype_superclass": "Binary"
                        }, 
                        "precond": {
                            "python": "e_graphout == \"gif\""
                        }, 
                        "filenames": {
                            "python": "\"*.gif\""
                        }
                    }, 
                    "outgraph_ps": {
                        "isout": true, 
                        "prompt": "Graph file", 
                        "type": {
                            "datatype_class": "PostScript", 
                            "datatype_superclass": "Binary"
                        }, 
                        "precond": {
                            "python": "e_graphout == \"ps\" or e_graphout == \"cps\""
                        }, 
                        "filenames": {
                            "python": "\"*.ps\""
                        }
                    }, 
                    "outgraph_meta": {
                        "isout": true, 
                        "prompt": "Graph file", 
                        "type": {
                            "datatype_class": "Picture", 
                            "datatype_superclass": "Binary"
                        }, 
                        "precond": {
                            "python": "e_graphout == \"meta\""
                        }, 
                        "filenames": {
                            "python": "\"*.meta\""
                        }
                    }, 
                    "outgraph_data": {
                        "isout": true, 
                        "prompt": "Graph file", 
                        "type": {
                            "datatype_class": "Text"
                        }, 
                        "precond": {
                            "python": "e_graphout == \"data\""
                        }, 
                        "filenames": {
                            "python": "\"*.dat\""
                        }
                    }
                }
            }
        }
    }, 
    "comment": "<text lang=\"en\">cif (for Cut In Frame) is a tool that works with DNA sequences. It is used to digest your sequences with a pool of restriction enzymes and to search which enzymes cut your sequence keeping your reading frame after ligation without any frame shift produced due to the digestion.</text> <text lang=\"en\">This helps users to work with a gene of interest to localize potential region(s) that could be removed from the final protein to check if regions have an impact or not on the final gene product. It can also allow to identify vital region(s) for the gene.</text> </comment>"
}