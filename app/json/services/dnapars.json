{
    "type": "program", 
    "name": "dnapars", 
    "version": "6.3.1", 
    "title": "dnapars", 
    "description": "<text lang=\"en\">DNA Parsimony Program</text> </description>", 
    "authors": "Rice,P. Longden,I. and Bleasby, A.</authors>", 
    "references": [
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Larget, B. and D. Simon (1999). Markov chain Monte Carlo algorithms for the Bayesian analysis of phylogenetic trees. Molecular Biology and Evolution 16:750-759.</reference>"
        }, 
        {
            "value": "Simon, D. and B. Larget. 1998. Bayesian analysis in molecular biology and evolution (BAMBE), version 1.01 beta. Department of Mathematics and Computer Science, Duquesne University.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Gascuel O., 1997, BIONJ: an improved version of the NJ algorithm based on a simple model of sequence data, Molecular Biology and Evolution 14(7):685-695</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer,Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.</reference>"
        }, 
        {
            "value": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer, Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.</reference>"
        }, 
        {
            "value": "Criscuolo A, Gribaldo S (2010) BMGE (Block Mapping and Gathering with Entropy): selection of phylogenetic informative regions from multiple sequence alignments. BMC Evolutionary Biology 10:210. </reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Huang, X. and Madan, A. (1999) CAP3: A DNA Sequence Assembly Program. Genome Research, 9: 868-877.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Christian N. S. Pedersen, Rune B. Lyngso and Jotun Hein. Comparison of coding DNA in Proceedings of the 9th Annual Symposium of Combinatorial Pattern Matching (CPM), 1998.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "G.Z. Hertz and G.D. Stormo. Identification of consensus patterns in unaligned DNA and protein sequences: a large-deviation statistical basis for penalizing gaps. In: Proceedings of the Third International Conference on Bioinformatics and Genome Research (H.A. Lim, and C.R. Cantor, editors). World Scientific Publishing Co., Ltd. Singapore, 1995. pages 201--216.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "A.W.M. Dress, G. Fullen, S.W. Perrey, A Divide and Conquer Approach to Multiple Alignment, Proceedings of the Third International Conference on Intelligent Systems for Molecular Biology (ISMB 95), AAAI Press, Menlo Park, CA, USA, 107-113, 1995.</reference>"
        }, 
        {
            "value": "J. Stoye, Multiple Sequence Alignment with the Divide-and-Conquer Method, Gene 211(2), GC45-GC56, 1998. (Gene-COMBIS)</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "B. Morgenstern (1999). DIALIGN 2: improvement of the segment-to-segment approach to multiple sequence alignment. Bioinformatics 15, 211 - 218.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }
    ], 
    "sourcelinks": [
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net/download", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net/download", 
        "https://projets.pasteur.fr/projects/list_files/blast2usa", 
        "ftp://ftp.pasteur.fr/pub/gensoft/projects/BMGE/", 
        "ftp://www.isrec.isb-sib.ch/pub/software/unix/boxshade/", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://seq.cs.iastate.edu/cap3.html", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://sourceforge.net/projects/codonw/files/", 
        "http://www.daimi.au.dk/~ocaprani/ComAlign/programs/", 
        "http://www.daimi.au.dk/~cstorm/combat/", 
        "http://emboss.sourceforge.net/download", 
        "http://gzhertz.home.comcast.net/~gzhertz/CONSENSUS_2004-04-14.TAR.gz", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://bibiserv.techfak.uni-bielefeld.de/download/tools/dca.html", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://dialign.gobics.de/download/", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download"
    ], 
    "homepagelinks": [
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net", 
        "https://projets.pasteur.fr/projects/show/blast2usa", 
        "http://www.ch.embnet.org/software/BOX_form.html", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://seq.cs.iastate.edu/", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://codonw.sourceforge.net/", 
        "http://www.daimi.au.dk/~ocaprani/ComAlign/ComAlign.html", 
        "http://www.daimi.au.dk/~cstorm/combat/", 
        "http://emboss.sourceforge.net", 
        "http://gzhertz.home.comcast.net/~gzhertz/", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://bibiserv.techfak.uni-bielefeld.de/dca/", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://dialign.gobics.de/", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net"
    ], 
    "doclinks": [
        "http://bioweb2.pasteur.fr/docs/EMBOSS/abiview.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/antigenic.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranambig.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/banana.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/biosed.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", 
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html", 
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", 
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html", 
        "http://bioweb2.pasteur.fr/docs/BMGE/BMGE_doc.pdf", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/btwisted.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cai.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/chaos.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/charge.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/checktrans.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/chips.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/cif/cif.html", 
        "http://bioweb2.pasteur.fr/docs/cif/compatible_cohesive_ends.txt", 
        "http://bioweb2.pasteur.fr/docs/cif/paillasse_liste.txt", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cirdna.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/clique.html", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/codcmp.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://serpico.rennes.inria.fr/doku.php?id=software:nd-safir:index", 
        "http://serpico.rennes.inria.fr/doku.php?id=software:nd-safir:index", 
        "http://serpico.rennes.inria.fr/doku.php?id=software:nd-safir:index", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/coderet.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://codonw.sourceforge.net/Readme.html", 
        "http://codonw.sourceforge.net/Tutorial.html", 
        "http://www.daimi.au.dk/~ocaprani/ComAlign/HowTo.html", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/compseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/consense.html", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cons.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cpgplot.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cpgreport.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cusp.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cutseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/dan.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/degapseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/density.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/descseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/diffseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/digest.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/distmat.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/dnadist.html", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/dnapars.html"
    ], 
    "mobyle_cats": [
        "display", 
        "alignment:formatter", 
        "sequence:protein:motifs", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "phylogeny:bayesian", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "phylogeny:distance", 
        "sequence:edit", 
        "alignment:pairwise", 
        "database:search:filter", 
        "database:search:homology", 
        "database:search:display", 
        "database:search:filter", 
        "database:search:display", 
        "database:search:homology", 
        "alignment:multiple:information", 
        "alignment:multiple:display", 
        "sequence:nucleic:composition", 
        "sequence:nucleic:codon_usage", 
        "assembly:assembly", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "sequence:protein:composition", 
        "sequence:nucleic:codon_usage", 
        "sequence:enzyme:analysis", 
        "sequence:nucleic:restriction", 
        "display:nucleic:restriction", 
        "display", 
        "phylogeny:others", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "sequence:nucleic:codon_usage", 
        "Bio-Imaging", 
        "Bio-Imaging", 
        "Bio-Imaging", 
        "sequence:nucleic:edit", 
        "sequence:nucleic:codon_usage", 
        "alignment:multiple", 
        "alignment:pairwise", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "sequence:formatter", 
        "phylogeny:tree_analyser", 
        "sequence:protein:pattern", 
        "sequence:nucleic:pattern", 
        "alignment:consensus", 
        "alignment:structure", 
        "structure:indexing", 
        "sequence:nucleic:cpg_islands", 
        "sequence:nucleic:cpg_islands", 
        "sequence:nucleic:codon_usage", 
        "sequence:edit", 
        "sequence:nucleic:composition", 
        "alignment:multiple", 
        "sequence:edit", 
        "sequence:nucleic:composition", 
        "sequence:edit", 
        "genetics:detection", 
        "alignment:multiple", 
        "alignment:differences", 
        "sequence:protein:motifs", 
        "phylogeny:distance", 
        "phylogeny:distance", 
        "phylogeny:parsimony"
    ], 
    "command": "distmat", 
    "inputs": {
        "parameters": {
            "dnapars": {
                "ishidden": true, 
                "type": {
                    "datatype_class": "String"
                }, 
                "format": {
                    "perl": "dnapars.params\"", 
                    "python": "dnapars.params\""
                }
            }, 
            "infile": {
                "ismaininput": true, 
                "ismandatory": true, 
                "prompt": "Alignment File (infile)", 
                "type": {
                    "biotype": "DNA", 
                    "datatype_class": "Alignment", 
                    "data_formats": [
                        "PHYLIPI"
                    ]
                }, 
                "precond": {
                    "perl": "$infile ne \"infile\"", 
                    "python": "infile != \"infile\""
                }, 
                "format": {
                    "perl": " \"", 
                    "python": " \""
                }, 
                "ctrl": {
                    "python": "value not in ( \"outfile\" , \"infile\" , \"outtree\"  , \"intree\")", 
                    "perl": "$value ne \"outfile\" and $value ne \"infile\" and $value ne \"outtree\" and $value ne \"intree\""
                }, 
                "comment": "<text lang=\"en\">The input file must contained aligned sequences in PHYLIP format obtained by sequence alignment programs.</text> </comment>"
            }, 
            "dnapars_opt": {
                "name": "dnapars_opt", 
                "parameters": {
                    "use_threshold": {
                        "prompt": "Use Threshold parsimony (T)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": "($value) ? \"T\\\\n$threshold\\\\n\" : \"\"", 
                            "python": "( \"\" , \"T\\n\" + str( threshold ) + \"\\n\" )[ value ]"
                        }
                    }, 
                    "threshold": {
                        "ismandatory": true, 
                        "prompt": "Value for threshold parsimony", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "precond": {
                            "perl": "$use_threshold", 
                            "python": "use_threshold"
                        }, 
                        "ctrl": {
                            "perl": " 1", 
                            "python": " 1"
                        }, 
                        "comment": "<text lang=\"en\">Thresholds less than or equal to 1.0 do not have any meaning and should not be used: they will result in a tree dependent only on the input order of species and not at all on the data</text> </comment>"
                    }, 
                    "use_transversion": {
                        "prompt": "Use Transversion parsimony (N)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": "($value) ? \"N\\\\n\" : \"\"", 
                            "python": "( \"\" , \"N\\n\" )[ value ]"
                        }
                    }
                }
            }, 
            "bootstrap": {
                "name": "bootstrap", 
                "parameters": {
                    "seqboot": {
                        "prompt": "Perform a bootstrap before analysis", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": " \" : \"\"", 
                            "python": " \" )[ value ]"
                        }, 
                        "ctrl": {
                            "perl": "not( $seqboot and $jumble)", 
                            "python": "not( seqboot and jumble)"
                        }, 
                        "comment": "<text lang=\"en\">By selecting this option, the bootstrap will be performed on your sequence file. So you don't need to perform a separated seqboot before.</text> <text lang=\"en\">Don't give an already bootstrapped file to the program, this won't work!</text> <text lang=\"en\">You can't use \"Randomize options\" and \"Bootstrap options\" at the same time.</text> </comment>"
                    }, 
                    "Method": {
                        "ismandatory": true, 
                        "prompt": "Resampling methods (J)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "precond": {
                            "perl": "$seqboot", 
                            "python": "seqboot"
                        }, 
                        "default_value": [
                            "bootstrap"
                        ], 
                        "authorized_values": [
                            {
                                "value": "bootstrap", 
                                "label": "Bootstrap"
                            }, 
                            {
                                "value": "jackknife", 
                                "label": "Delete-half jackknife"
                            }, 
                            {
                                "value": "permute_species", 
                                "label": "Permute species for each character"
                            }, 
                            {
                                "value": "permute_char", 
                                "label": "Permute character order"
                            }, 
                            {
                                "value": "permute_within_species", 
                                "label": "Permute within species"
                            }
                        ], 
                        "comment": "<text lang=\"en\"> 1. The bootstrap. Bootstrapping was invented by Bradley Efron in 1979, and its use in phylogeny estimation was introduced by me (Felsenstein, 1985b). It involves creating a new data set by sampling N characters randomly with replacement, so that the resulting data set has the same size as the original, but some characters have been left out and others are duplicated. The random variation of the results from analyzing these bootstrapped data sets can be shown statistically to be typical of the variation that you would get from collecting new data sets. The method assumes that the characters evolve independently, an assumption that may not be realistic for many kinds of data. </text> <text lang=\"en\"> 2. Delete-half-jackknifing. This alternative to the bootstrap involves sampling a random half of the characters, and including them in the data but dropping the others. The resulting data sets are half the size of the original, and no characters are duplicated. The random variation from doing this should be very similar to that obtained from the bootstrap. The method is advocated by Wu (1986). </text> <text lang=\"en\"> 3. Permuting species for each characters. This method of resampling (well, OK, it may not be best to call it resampling) was introduced by Archie (1989) and Faith (1990; see also Faith and Cranston, 1991). It involves permuting the columns of the data matrix separately. This produces data matrices that have the same number and kinds of characters but no taxonomic structure. It is used for different purposes than the bootstrap, as it tests not the variation around an estimated tree but the hypothesis that there is no taxonomic structure in the data: if a statistic such as number of steps is significantly smaller in the actual data than it is in replicates that are permuted, then we can argue that there is some taxonomic structure in the data (though perhaps it might be just the presence of aa pair of sibling species). </text> <text lang=\"en\"> 4. Permuting characters order. This simply permutes the order of the characters, the same reordering being applied to all species. For many methods of tree inference this will make no difference to the outcome (unless one has rates of evolution correlated among adjacent sites). It is included as a possible step in carrying out a permutation test of homogeneity of characters (such as the Incongruence Length Difference test). </text> <text lang=\"en\"> 5. Permuting characters separately for each species. This is a method introduced by Steel, Lockhart, and Penny (1993) to permute data so as to destroy all phylogenetic structure, while keeping the base composition of each species the same as before. It shuffles the character order separately for each species. </text> </comment>"
                    }, 
                    "replicates": {
                        "prompt": "How many replicates (R)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "precond": {
                            "perl": "$seqboot", 
                            "python": "seqboot"
                        }, 
                        "default_value": [
                            "100"
                        ], 
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"R\\\\n$value\\\\n\" : \"\"", 
                            "python": "( \"\" , \"R\\n\" + str( value ) +\"\\n\" )[ value is not None and value != vdef ]"
                        }, 
                        "ctrl": {
                            "perl": " 1", 
                            "python": " 1"
                        }
                    }, 
                    "seqboot_seed": {
                        "ismandatory": true, 
                        "prompt": "Random number seed (must be odd)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "precond": {
                            "perl": "$seqboot", 
                            "python": "seqboot"
                        }, 
                        "format": {
                            "perl": "\"$value\\\\n\"", 
                            "python": "str( value ) + \"\\n\""
                        }, 
                        "ctrl": {
                            "perl": " 0 and (($value % 2) != 0)", 
                            "python": " 0 and (( value % 2 ) != 0 )"
                        }
                    }, 
                    "seqboot_times2jumble": {
                        "prompt": "Number of times to jumble", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "precond": {
                            "perl": "$seqboot", 
                            "python": "seqboot"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "ctrl": {
                            "perl": "= 100000", 
                            "python": "= 100000"
                        }
                    }, 
                    "multiple_dataset": {
                        "ishidden": true, 
                        "type": {
                            "datatype_class": "String"
                        }, 
                        "precond": {
                            "perl": "$seqboot", 
                            "python": "seqboot"
                        }, 
                        "format": {
                            "perl": "\"M\\\\nD\\\\n$replicates\\\\n$seqboot_seed\\\\n$times2jumble\\\\n\"", 
                            "python": "\"M\\nD\\n\" + str( replicates ) + \"\\n\" + str(seqboot_seed) + \"\\n\"+ str( seqboot_times2jumble ) + \"\\n\""
                        }
                    }, 
                    "bootconfirm": {
                        "ishidden": true, 
                        "type": {
                            "datatype_class": "String"
                        }, 
                        "precond": {
                            "perl": "$seqboot", 
                            "python": "seqboot"
                        }, 
                        "format": {
                            "perl": "\"Y\\\\n\"", 
                            "python": "\"Y\\n\""
                        }
                    }, 
                    "bootterminal_type": {
                        "ishidden": true, 
                        "type": {
                            "datatype_class": "String"
                        }, 
                        "precond": {
                            "perl": "$seqboot", 
                            "python": "seqboot"
                        }, 
                        "format": {
                            "perl": "\"0\\\\n\"", 
                            "python": "\"0\\n\""
                        }
                    }, 
                    "consense": {
                        "prompt": "Compute a consensus tree", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "precond": {
                            "perl": "$seqboot and $print_treefile", 
                            "python": "seqboot and print_treefile"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": " mv outfile consense.outfile\" : \"\"", 
                            "python": " mv outfile consense.outfile\" )[ value ]"
                        }
                    }
                }
            }, 
            "jumble_opt": {
                "name": "jumble_opt", 
                "parameters": {
                    "jumble": {
                        "prompt": "Randomize (jumble) input order (J)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": "($value and not $seqboot )? \"J\\\\n$jumble_seed\\\\n$jumble_times\\\\n\" : \"\"", 
                            "python": "( \"\" , \"J\\n\" + str( jumble_seed ) + \"\\n\" + str( jumble_times ) +\"\\n\" )[ value and not seqboot ]"
                        }, 
                        "ctrl": {
                            "perl": "not( $jumble and $seqboot)", 
                            "python": "not (jumble and seqboot)"
                        }
                    }, 
                    "jumble_seed": {
                        "ismandatory": true, 
                        "prompt": "Random number seed for jumble (must be odd)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "precond": {
                            "perl": "$jumble", 
                            "python": "jumble"
                        }, 
                        "ctrl": {
                            "perl": " 0 and (($value % 2) != 0))", 
                            "python": " 0 and ((value % 2) != 0))"
                        }
                    }, 
                    "jumble_times": {
                        "ismandatory": true, 
                        "prompt": "Number of times to jumble", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "precond": {
                            "perl": "$jumble", 
                            "python": "jumble"
                        }, 
                        "default_value": [
                            "1"
                        ]
                    }
                }
            }, 
            "user_tree_opt": {
                "name": "user_tree_opt", 
                "parameters": {
                    "user_tree": {
                        "prompt": "Use User tree (default: no, search for best tree) (U)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": "($value)? \"U\\\\n\" : \"\"", 
                            "python": "( \"\" , \"U\\n\" )[ value ]"
                        }, 
                        "ctrl": {
                            "perl": "not ( $user_tree and $jumble )", 
                            "python": "not ( user_tree and jumble )"
                        }, 
                        "comment": "<text lang=\"en\">To give your tree to the program, you must normally put it in the alignment file, after the sequences, preceded by a line indicating how many trees you give.</text> <text lang=\"en\">Here, this will be automatically appended: just give a treefile and the number of trees in it.</text> </comment>"
                    }, 
                    "tree_file": {
                        "ismandatory": true, 
                        "prompt": "User Tree file", 
                        "type": {
                            "datatype_class": "Tree", 
                            "data_formats": [
                                "NEWICK"
                            ]
                        }, 
                        "precond": {
                            "perl": "$user_tree", 
                            "python": "user_tree"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \"ln -s $tree_file intree; \" : \"\"", 
                            "python": "( \"\" , \"ln -s \" + str( tree_file ) + \" intree; \" )[ value is not None ]"
                        }, 
                        "ctrl": {
                            "python": "value not in ( \"outfile\" , \"infile\" , \"outtree\" ,\"intree\" )", 
                            "perl": "$value ne \"outfile\" and $value ne \"infile\" and $value ne \"outtree\" and $value ne \"intree\""
                        }, 
                        "comment": "<text lang=\"en\">Give a tree whenever the infile does not already contain the tree.</text> </comment>"
                    }
                }
            }, 
            "weight_opt": {
                "name": "weight_opt", 
                "parameters": {
                    "weights": {
                        "prompt": "Use weights for sites (W)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": "($value) ? \"W\\\\n\" : \"\"", 
                            "python": "( \"\" , \"W\\n\" )[ value ]"
                        }
                    }, 
                    "weights_file": {
                        "ismandatory": true, 
                        "prompt": "Weights file", 
                        "type": {
                            "datatype_class": "PhylipWeight", 
                            "datatype_superclass": "AbstractText"
                        }, 
                        "precond": {
                            "perl": "$weights", 
                            "python": "weights"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \"ln -s $weights_file weights; \" : \"\"", 
                            "python": "( \"\" , \"ln -s \" + str( weights_file ) + \" weights; \" )[ value is not None ]"
                        }, 
                        "ctrl": {
                            "python": "value not in ( \"outfile\" , \"infile\" , \"outtree\" ,\"intree\" )", 
                            "perl": "$value ne \"outfile\" and $value ne \"infile\" and $value ne \"outtree\" and $value ne \"intree\""
                        }
                    }
                }
            }, 
            "output": {
                "name": "output", 
                "parameters": {
                    "print_tree": {
                        "prompt": "Print out tree (3)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "format": {
                            "perl": "($value) ? \"\" : \"3\\\\n\"", 
                            "python": "( \"3\\n\" , \"\")[ value ]"
                        }, 
                        "comment": "<text lang=\"en\">Tells the program to print a semi-graphical picture of the tree in the outfile.</text> </comment>"
                    }, 
                    "print_steps": {
                        "prompt": "Print out steps in each site (4)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": "($value) ? \"4\\\\n\" : \"\"", 
                            "python": "( \"\" , \"4\\n\" )[ value ]"
                        }
                    }, 
                    "print_sequences": {
                        "prompt": "Print sequences at all nodes of tree (5)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": "($value) ? \"5\\\\n\" : \"\"", 
                            "python": "( \"\" , \"5\\n\" )[ value ]"
                        }
                    }, 
                    "print_treefile": {
                        "prompt": "Write out trees onto tree file (6)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "format": {
                            "perl": "($value) ? \"\" : \"6\\\\n\"", 
                            "python": "( \"6\\n\" , \"\" )[ value ]"
                        }, 
                        "comment": "<text lang=\"en\">Tells the program to save the tree in a tree file (outtree) (a standard representation of trees where the tree is specified by a nested pairs of parentheses, enclosing names and separated by commas).</text> </comment>"
                    }, 
                    "printdata": {
                        "prompt": "Print out the data at start of run (1)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "0"
                        ], 
                        "format": {
                            "perl": "($value) ? \"1\\\\n\" : \"\"", 
                            "python": "( \"\" , \"1\\n\" )[ value ]"
                        }
                    }
                }
            }, 
            "other_options": {
                "name": "other_options", 
                "parameters": {
                    "outgroup": {
                        "prompt": "Outgroup species (J)", 
                        "type": {
                            "datatype_class": "Integer"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"O\\\\n$value\\\\n\" : \"\"", 
                            "python": "( \"\" , \"O\\n\" + str( value ) + \"\\n\" )[ value is not None and value != vdef ]"
                        }, 
                        "ctrl": {
                            "perl": " 0", 
                            "python": " 0"
                        }, 
                        "comment": "<text lang=\"en\">The O (Outgroup) option specifies which species is to have the root of the tree be on the line leading to it.</text> <text lang=\"en\">For example, if the outgroup is a species \"Mouse\" then the root of the tree will be placed in the middle of the branch which is connected to this species, with Mouse branching off on one side of the root and the lineage leading to the rest of the tree on the other.</text> <text lang=\"en\">This option is toggle on by choosing the number of the outgroup (the species being taken in the numerical order that they occur in the input file).</text> <text lang=\"en\">Outgroup-rooting will not be attempted if it is a user-defined tree, despite your invoking the option.</text> <text lang=\"en\">When it is used, the tree as printed out is still listed as being an unrooted tree, though the outgroup is connected to the bottommost node so that it is easy to visually convert the tree into rooted form.</text> </comment>"
                    }
                }
            }, 
            "confirm": {
                "ishidden": true, 
                "type": {
                    "datatype_class": "String"
                }, 
                "format": {
                    "perl": "\"Y\\\\n\"", 
                    "python": "\"Y\\n\""
                }
            }, 
            "terminal_type": {
                "ishidden": true, 
                "type": {
                    "datatype_class": "String"
                }, 
                "format": {
                    "perl": "\"0\\\\n\"", 
                    "python": "\"0\\n\""
                }
            }, 
            "consense_confirm": {
                "ishidden": true, 
                "type": {
                    "datatype_class": "String"
                }, 
                "precond": {
                    "perl": "$consense", 
                    "python": "consense"
                }, 
                "format": {
                    "perl": "\"Y\\\\n\"", 
                    "python": "\"Y\\n\""
                }
            }, 
            "consense_terminal_type": {
                "ishidden": true, 
                "type": {
                    "datatype_class": "String"
                }, 
                "precond": {
                    "perl": "$consense", 
                    "python": "consense"
                }, 
                "format": {
                    "perl": "\"T\\\\n\"", 
                    "python": "\"T\\n\""
                }
            }, 
            "consense_outgroup": {
                "ishidden": true, 
                "type": {
                    "datatype_class": "String"
                }, 
                "precond": {
                    "perl": " 1", 
                    "python": " 1"
                }, 
                "format": {
                    "perl": "\"O\\\\n$outgroup\\\\n\"", 
                    "python": "\"O\\n\" + str( outgroup ) + \"\\n\""
                }
            }
        }
    }, 
    "outputs": {
        "parameters": {
            "outfile": {
                "isout": true, 
                "prompt": "Outfile", 
                "type": {
                    "datatype_class": "Text"
                }, 
                "format": {
                    "perl": " mv outfile dnapars.outfile\"", 
                    "python": " mv outfile dnapars.outfile\""
                }, 
                "filenames": {
                    "perl": "dnapars.outfile", 
                    "python": "'dnapars.outfile'"
                }
            }, 
            "treefile": {
                "isout": true, 
                "prompt": "Tree file", 
                "type": {
                    "datatype_class": "Tree", 
                    "data_formats": [
                        "NEWICK"
                    ]
                }, 
                "precond": {
                    "perl": "$print_treefile", 
                    "python": "print_treefile"
                }, 
                "format": {
                    "perl": " mv outtree dnapars.outtree\" ", 
                    "python": " mv outtree dnapars.outtree\""
                }, 
                "filenames": {
                    "perl": "dnapars.outtree", 
                    "python": "'dnapars.outtree'"
                }
            }, 
            "seqboot_out": {
                "isout": true, 
                "prompt": "seqboot outfile", 
                "type": {
                    "datatype_class": "SetOfAlignment", 
                    "datatype_superclass": "AbstractText"
                }, 
                "precond": {
                    "perl": "$seqboot", 
                    "python": "seqboot"
                }, 
                "filenames": {
                    "perl": "\"seqboot.outfile\"", 
                    "python": "\"seqboot.outfile\""
                }
            }, 
            "consense_outfile": {
                "isout": true, 
                "prompt": "Consense outfile", 
                "type": {
                    "datatype_class": "Text"
                }, 
                "precond": {
                    "perl": "$consense", 
                    "python": "consense"
                }, 
                "filenames": {
                    "perl": "\"consense.outfile\"", 
                    "python": "\"consense.outfile\""
                }
            }, 
            "consense_treefile": {
                "isout": true, 
                "prompt": "Consense tree file", 
                "type": {
                    "datatype_class": "Tree", 
                    "data_formats": [
                        "NEWICK"
                    ]
                }, 
                "precond": {
                    "perl": "$consense", 
                    "python": "consense"
                }, 
                "filenames": {
                    "perl": "\"consense.outtree\"", 
                    "python": "\"consense.outtree\""
                }
            }
        }
    }, 
    "comment": "<text lang=\"en\">This program carries out unrooted parsimony (analogous to Wagner trees) (Eck and Dayhoff, 1966; Kluge and Farris, 1969) on DNA sequences. The method of Fitch (1971) is used to count the number of changes of base needed on a given tree.</text> </comment>"
}