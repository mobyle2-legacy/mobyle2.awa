{
    "type": "program", 
    "name": "drawgram", 
    "version": "6.3.1", 
    "title": "drawgram", 
    "description": "<text lang=\"en\">Plots a cladogram- or phenogram-like rooted tree</text> </description>", 
    "authors": "Rice,P. Longden,I. and Bleasby, A.</authors>", 
    "references": [
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Larget, B. and D. Simon (1999). Markov chain Monte Carlo algorithms for the Bayesian analysis of phylogenetic trees. Molecular Biology and Evolution 16:750-759.</reference>"
        }, 
        {
            "value": "Simon, D. and B. Larget. 1998. Bayesian analysis in molecular biology and evolution (BAMBE), version 1.01 beta. Department of Mathematics and Computer Science, Duquesne University.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Gascuel O., 1997, BIONJ: an improved version of the NJ algorithm based on a simple model of sequence data, Molecular Biology and Evolution 14(7):685-695</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer,Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.</reference>"
        }, 
        {
            "value": "Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaeffer, Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), Gapped BLAST and PSI-BLAST: a new generation of protein database search programs, Nucleic Acids Res. 25:3389-3402.</reference>"
        }, 
        {
            "value": "Criscuolo A, Gribaldo S (2010) BMGE (Block Mapping and Gathering with Entropy): selection of phylogenetic informative regions from multiple sequence alignments. BMC Evolutionary Biology 10:210. </reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Huang, X. and Madan, A. (1999) CAP3: A DNA Sequence Assembly Program. Genome Research, 9: 868-877.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "Christian N. S. Pedersen, Rune B. Lyngso and Jotun Hein. Comparison of coding DNA in Proceedings of the 9th Annual Symposium of Combinatorial Pattern Matching (CPM), 1998.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "G.Z. Hertz and G.D. Stormo. Identification of consensus patterns in unaligned DNA and protein sequences: a large-deviation statistical basis for penalizing gaps. In: Proceedings of the Third International Conference on Bioinformatics and Genome Research (H.A. Lim, and C.R. Cantor, editors). World Scientific Publishing Co., Ltd. Singapore, 1995. pages 201--216.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "A.W.M. Dress, G. Fullen, S.W. Perrey, A Divide and Conquer Approach to Multiple Alignment, Proceedings of the Third International Conference on Intelligent Systems for Molecular Biology (ISMB 95), AAAI Press, Menlo Park, CA, USA, 107-113, 1995.</reference>"
        }, 
        {
            "value": "J. Stoye, Multiple Sequence Alignment with the Divide-and-Conquer Method, Gene 211(2), GC45-GC56, 1998. (Gene-COMBIS)</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "B. Morgenstern (1999). DIALIGN 2: improvement of the segment-to-segment approach to multiple sequence alignment. Bioinformatics 15, 211 - 218.</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }, 
        {
            "value": "EMBOSS: The European Molecular Biology Open Software Suite (2000) Rice,P. Longden,I. and Bleasby, A. Trends in Genetics 16, (6) pp276--277</reference>"
        }
    ], 
    "sourcelinks": [
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net/download", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net/download", 
        "https://projets.pasteur.fr/projects/list_files/blast2usa", 
        "ftp://ftp.pasteur.fr/pub/gensoft/projects/BMGE/", 
        "ftp://www.isrec.isb-sib.ch/pub/software/unix/boxshade/", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://seq.cs.iastate.edu/cap3.html", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://sourceforge.net/projects/codonw/files/", 
        "http://www.daimi.au.dk/~ocaprani/ComAlign/programs/", 
        "http://www.daimi.au.dk/~cstorm/combat/", 
        "http://emboss.sourceforge.net/download", 
        "http://gzhertz.home.comcast.net/~gzhertz/CONSENSUS_2004-04-14.TAR.gz", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://bibiserv.techfak.uni-bielefeld.de/download/tools/dca.html", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://dialign.gobics.de/download/", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download", 
        "http://emboss.sourceforge.net/download"
    ], 
    "homepagelinks": [
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://www.stat.wisc.edu/~larget/", 
        "http://emboss.sourceforge.net", 
        "http://www.lirmm.fr/~w3ifa/MAAS/BIONJ/", 
        "http://emboss.sourceforge.net", 
        "https://projets.pasteur.fr/projects/show/blast2usa", 
        "http://www.ch.embnet.org/software/BOX_form.html", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://seq.cs.iastate.edu/", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://codonw.sourceforge.net/", 
        "http://www.daimi.au.dk/~ocaprani/ComAlign/ComAlign.html", 
        "http://www.daimi.au.dk/~cstorm/combat/", 
        "http://emboss.sourceforge.net", 
        "http://gzhertz.home.comcast.net/~gzhertz/", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://bibiserv.techfak.uni-bielefeld.de/dca/", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://dialign.gobics.de/", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net", 
        "http://emboss.sourceforge.net"
    ], 
    "doclinks": [
        "http://bioweb2.pasteur.fr/docs/EMBOSS/abiview.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/antigenic.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranambig.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/backtranseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/banana.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/biosed.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", 
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html", 
        "http://www.ncbi.nlm.nih.gov/books/bv.fcgi?rid=handbook.chapter.ch16", 
        "http://www.ncbi.nlm.nih.gov/Education/BLASTinfo/tut1.html", 
        "http://bioweb2.pasteur.fr/docs/BMGE/BMGE_doc.pdf", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/btwisted.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cai.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/chaos.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/charge.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/checktrans.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/chips.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/cif/cif.html", 
        "http://bioweb2.pasteur.fr/docs/cif/compatible_cohesive_ends.txt", 
        "http://bioweb2.pasteur.fr/docs/cif/paillasse_liste.txt", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cirdna.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/clique.html", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/codcmp.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://serpico.rennes.inria.fr/doku.php?id=software:nd-safir:index", 
        "http://serpico.rennes.inria.fr/doku.php?id=software:nd-safir:index", 
        "http://serpico.rennes.inria.fr/doku.php?id=software:nd-safir:index", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/coderet.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://codonw.sourceforge.net/Readme.html", 
        "http://codonw.sourceforge.net/Tutorial.html", 
        "http://www.daimi.au.dk/~ocaprani/ComAlign/HowTo.html", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/compseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/consense.html", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cons.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cpgplot.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cpgreport.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cusp.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/cutseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/dan.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/degapseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/density.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/descseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/diffseq.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/digest.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/distmat.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/dnadist.html", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/dnapars.html", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/dotmatcher.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/dotpath.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/EMBOSS/dottup.html", 
        "http://emboss.sourceforge.net/docs/themes", 
        "http://bioweb2.pasteur.fr/docs/phylip/doc/drawgram.html"
    ], 
    "mobyle_cats": [
        "display", 
        "alignment:formatter", 
        "sequence:protein:motifs", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "sequence:nucleic:translation", 
        "sequence:protein:composition", 
        "phylogeny:bayesian", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "phylogeny:distance", 
        "sequence:edit", 
        "alignment:pairwise", 
        "database:search:filter", 
        "database:search:homology", 
        "database:search:display", 
        "database:search:filter", 
        "database:search:display", 
        "database:search:homology", 
        "alignment:multiple:information", 
        "alignment:multiple:display", 
        "sequence:nucleic:composition", 
        "sequence:nucleic:codon_usage", 
        "assembly:assembly", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "sequence:protein:composition", 
        "sequence:nucleic:codon_usage", 
        "sequence:enzyme:analysis", 
        "sequence:nucleic:restriction", 
        "display:nucleic:restriction", 
        "display", 
        "phylogeny:others", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "alignment:multiple", 
        "sequence:nucleic:codon_usage", 
        "Bio-Imaging", 
        "Bio-Imaging", 
        "Bio-Imaging", 
        "sequence:nucleic:edit", 
        "sequence:nucleic:codon_usage", 
        "alignment:multiple", 
        "alignment:pairwise", 
        "sequence:nucleic:composition", 
        "sequence:protein:composition", 
        "sequence:formatter", 
        "phylogeny:tree_analyser", 
        "sequence:protein:pattern", 
        "sequence:nucleic:pattern", 
        "alignment:consensus", 
        "alignment:structure", 
        "structure:indexing", 
        "sequence:nucleic:cpg_islands", 
        "sequence:nucleic:cpg_islands", 
        "sequence:nucleic:codon_usage", 
        "sequence:edit", 
        "sequence:nucleic:composition", 
        "alignment:multiple", 
        "sequence:edit", 
        "sequence:nucleic:composition", 
        "sequence:edit", 
        "genetics:detection", 
        "alignment:multiple", 
        "alignment:differences", 
        "sequence:protein:motifs", 
        "phylogeny:distance", 
        "phylogeny:distance", 
        "phylogeny:parsimony", 
        "alignment:pairwise:dot_plots", 
        "alignment:pairwise:dot_plots", 
        "alignment:pairwise:dot_plots", 
        "phylogeny:display", 
        "display:tree"
    ], 
    "command": "dottup", 
    "inputs": {
        "parameters": {
            "drawgram": {
                "ishidden": true, 
                "type": {
                    "datatype_class": "String"
                }, 
                "format": {
                    "perl": "drawgram.params\"", 
                    "python": "drawgram.params\""
                }
            }, 
            "treefile": {
                "ismaininput": true, 
                "ismandatory": true, 
                "prompt": "Tree File (intree)", 
                "type": {
                    "datatype_class": "Tree", 
                    "data_formats": [
                        "NEWICK"
                    ]
                }, 
                "format": {
                    "perl": " \"", 
                    "python": " \""
                }, 
                "comment": "<text lang=\"en\">Tree in Newick format.</text> </comment>"
            }, 
            "screen_type": {
                "ishidden": true, 
                "type": {
                    "datatype_class": "String"
                }, 
                "format": {
                    "perl": "\"0\\\\n\"", 
                    "python": "\"0\\n\""
                }
            }, 
            "options": {
                "name": "options", 
                "parameters": {
                    "plotter": {
                        "prompt": "Which plotter or printer will the tree be drawn on (P)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "L"
                        ], 
                        "authorized_values": [
                            {
                                "value": "L", 
                                "label": "Postscript printer file format (L)"
                            }, 
                            {
                                "value": "M", 
                                "label": "PICT format (M)"
                            }, 
                            {
                                "value": "J", 
                                "label": "HP Laserjet PCL file format (J)"
                            }, 
                            {
                                "value": "W", 
                                "label": "MS-Windows Bitmap (W)"
                            }, 
                            {
                                "value": "K", 
                                "label": "TeKtronix 4010 graphics terminal (K)"
                            }, 
                            {
                                "value": "H", 
                                "label": "Hewlett-Packard pen plotter (H)"
                            }, 
                            {
                                "value": "D", 
                                "label": "DEC ReGIS graphics (D)"
                            }, 
                            {
                                "value": "B", 
                                "label": "Houston Instruments plotter (B)"
                            }, 
                            {
                                "value": "E", 
                                "label": "Epson MX-80 dot-matrix printer (E)"
                            }, 
                            {
                                "value": "C", 
                                "label": "Prowriter/Imagewriter dot-matrix printer (C)"
                            }, 
                            {
                                "value": "O", 
                                "label": "Okidata dot-matrix printer (O)"
                            }, 
                            {
                                "value": "T", 
                                "label": "Toshiba 24-pin dot-matrix printer (T)"
                            }, 
                            {
                                "value": "P", 
                                "label": "PCX file format (P)"
                            }, 
                            {
                                "value": "X", 
                                "label": "X Bitmap format (X)"
                            }, 
                            {
                                "value": "F", 
                                "label": "FIG 2.0 format (F)"
                            }, 
                            {
                                "value": "A", 
                                "label": "Idraw drawing program format (A)"
                            }, 
                            {
                                "value": "Z", 
                                "label": "VRML Virtual Reality Markup Language file (Z)"
                            }, 
                            {
                                "value": "V", 
                                "label": "POVRAY 3D rendering program file (V)"
                            }, 
                            {
                                "value": "R", 
                                "label": "Rayshade 3D rendering program file (R)"
                            }
                        ], 
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"P\\\\n$value\\\\n\" : \"\"", 
                            "python": "(\"\" , \"P\\n\" + str(value) +\"\\n\")[ value is not None and value != vdef ]"
                        }
                    }, 
                    "xbitmap_options": {
                        "name": "xbitmap_options", 
                        "precond": {
                            "perl": "$plotter =~ /^[XW]$/", 
                            "python": "plotter in [ \"X\" , \"W\" ]"
                        }, 
                        "parameters": {
                            "xres": {
                                "ismandatory": true, 
                                "prompt": "X resolution (in pixels)", 
                                "type": {
                                    "datatype_class": "Integer"
                                }, 
                                "default_value": [
                                    "500"
                                ], 
                                "format": {
                                    "perl": "\"$value\\\\n\"", 
                                    "python": "str( value ) + \"\\n\""
                                }, 
                                "ctrl": {
                                    "perl": "= 2500", 
                                    "python": "= 2500"
                                }
                            }, 
                            "yres": {
                                "ismandatory": true, 
                                "prompt": "Y resolution (in pixels)", 
                                "type": {
                                    "datatype_class": "Integer"
                                }, 
                                "default_value": [
                                    "500"
                                ], 
                                "format": {
                                    "perl": "\"$value\\\\n\"", 
                                    "python": "str( value ) + \"\\n\""
                                }, 
                                "ctrl": {
                                    "perl": "= 2500", 
                                    "python": "= 2500"
                                }
                            }
                        }
                    }, 
                    "laserjet_options": {
                        "name": "laserjet_options", 
                        "precond": {
                            "perl": "$plotter eq \"J\"", 
                            "python": "plotter == \"J\""
                        }, 
                        "parameters": {
                            "laserjet_resolution": {
                                "ismandatory": true, 
                                "prompt": "Laserjet resolution", 
                                "type": {
                                    "datatype_class": "Choice"
                                }, 
                                "default_value": [
                                    "3"
                                ], 
                                "authorized_values": [
                                    {
                                        "value": "1", 
                                        "label": "75 DPI (1)"
                                    }, 
                                    {
                                        "value": "2", 
                                        "label": "150 DPI (2)"
                                    }, 
                                    {
                                        "value": "3", 
                                        "label": "300 DPI (3)"
                                    }
                                ], 
                                "format": {
                                    "perl": "\"$value\\\\n\"", 
                                    "python": "str(value) +\"\\n\""
                                }
                            }
                        }
                    }, 
                    "pcx_options": {
                        "name": "pcx_options", 
                        "precond": {
                            "perl": "$plotter eq \"P\"", 
                            "python": "plotter == \"P\""
                        }, 
                        "parameters": {
                            "pcx_resolution": {
                                "ismandatory": true, 
                                "prompt": "Paintbrush PCX resolution", 
                                "type": {
                                    "datatype_class": "Choice"
                                }, 
                                "default_value": [
                                    "3"
                                ], 
                                "authorized_values": [
                                    {
                                        "value": "1", 
                                        "label": "EGA 640 X 350 (1)"
                                    }, 
                                    {
                                        "value": "2", 
                                        "label": "VGA 800 X 600 (2)"
                                    }, 
                                    {
                                        "value": "3", 
                                        "label": "VGA 1024 X 768 (3)"
                                    }
                                ], 
                                "format": {
                                    "perl": "\"$value\\\\n\"", 
                                    "python": "str(value) + \"\\n\""
                                }
                            }
                        }
                    }, 
                    "ps_options": {
                        "name": "ps_options", 
                        "precond": {
                            "perl": "$plotter eq \"L\"", 
                            "python": "plotter == \"L\""
                        }, 
                        "parameters": {
                            "font": {
                                "prompt": "Font (F)", 
                                "type": {
                                    "datatype_class": "Choice"
                                }, 
                                "default_value": [
                                    "Times-Roman"
                                ], 
                                "authorized_values": [
                                    {
                                        "value": "Courier", 
                                        "label": "Courier"
                                    }, 
                                    {
                                        "value": "Helvetica", 
                                        "label": "Helvetica"
                                    }, 
                                    {
                                        "value": "Helvetica-Bold", 
                                        "label": "Helvetica-Bold"
                                    }, 
                                    {
                                        "value": "Helvetica-BoldOblique", 
                                        "label": "Helvetica-BoldOblique"
                                    }, 
                                    {
                                        "value": "Helvetica-Oblique", 
                                        "label": "Helvetica-Oblique"
                                    }, 
                                    {
                                        "value": "Hershey", 
                                        "label": "Hershey"
                                    }, 
                                    {
                                        "value": "Times", 
                                        "label": "Times"
                                    }, 
                                    {
                                        "value": "Times-Bold", 
                                        "label": "Times-Bold"
                                    }, 
                                    {
                                        "value": "Times-BoldItalic", 
                                        "label": "Times-BoldItalic"
                                    }, 
                                    {
                                        "value": "Times-Italic", 
                                        "label": "Times-Italic"
                                    }, 
                                    {
                                        "value": "Times-Roman", 
                                        "label": "Times-Roman"
                                    }
                                ], 
                                "format": {
                                    "perl": "(defined $value and $value ne $vdef) ? \"F\\\\n$value\\\\n\" : \"\"", 
                                    "python": "(\"\", \"F\\n\"+str(value)+\"\\n\")[value is not None and value != vdef]"
                                }
                            }
                        }
                    }, 
                    "pov_options": {
                        "name": "pov_options", 
                        "precond": {
                            "perl": "$plotter eq \"V\"", 
                            "python": "plotter == \"V\""
                        }, 
                        "parameters": {
                            "pov_validate": {
                                "ishidden": true, 
                                "type": {
                                    "datatype_class": "String"
                                }, 
                                "format": {
                                    "perl": "\"Y\\\\n\"", 
                                    "python": "\"Y\\n\""
                                }
                            }
                        }
                    }, 
                    "vrml_options": {
                        "name": "vrml_options", 
                        "precond": {
                            "perl": "$plotter eq \"Z\"", 
                            "python": "plotter == \"Z\""
                        }, 
                        "parameters": {
                            "vrml_validate": {
                                "ishidden": true, 
                                "type": {
                                    "datatype_class": "String"
                                }, 
                                "format": {
                                    "perl": "\"Y\\\\n\"", 
                                    "python": "\"Y\\n\""
                                }
                            }
                        }
                    }, 
                    "ray_options": {
                        "name": "ray_options", 
                        "precond": {
                            "perl": "$plotter eq \"R\"", 
                            "python": "plotter == \"R\""
                        }, 
                        "parameters": {
                            "ray_validate": {
                                "ishidden": true, 
                                "type": {
                                    "datatype_class": "String"
                                }, 
                                "format": {
                                    "perl": "\"Y\\\\n\"", 
                                    "python": "\"Y\\n\""
                                }
                            }
                        }
                    }, 
                    "screen": {
                        "ishidden": true, 
                        "type": {
                            "datatype_class": "String"
                        }, 
                        "format": {
                            "perl": "\"V\\\\nN\\\\n\"", 
                            "python": "\"V\\nN\\n\""
                        }
                    }, 
                    "grows": {
                        "prompt": "Tree grows... (H)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "Horizontally"
                        ], 
                        "authorized_values": [
                            {
                                "value": "Vertically", 
                                "label": "Vertically"
                            }, 
                            {
                                "value": "Horizontally", 
                                "label": "Horizontally"
                            }
                        ], 
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"H\\\\n\" : \"\"", 
                            "python": "( \"\" , \"H\\n\" )[ value is not None and value != vdef ]"
                        }
                    }, 
                    "tree_style": {
                        "prompt": "Tree style (S)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "C"
                        ], 
                        "authorized_values": [
                            {
                                "value": "P", 
                                "label": "Phenogram (P)"
                            }, 
                            {
                                "value": "C", 
                                "label": "Cladogram (C)"
                            }, 
                            {
                                "value": "S", 
                                "label": "Swoopogram (S)"
                            }, 
                            {
                                "value": "E", 
                                "label": "Eurogram (E)"
                            }, 
                            {
                                "value": "V", 
                                "label": "Curvogram (V)"
                            }, 
                            {
                                "value": "O", 
                                "label": "Circular tree (O)"
                            }
                        ]
                    }, 
                    "branch_lengths": {
                        "prompt": "Use branch lengths (B)", 
                        "type": {
                            "datatype_class": "Boolean"
                        }, 
                        "default_value": [
                            "1"
                        ], 
                        "format": {
                            "perl": "($value) ? \"\" : \"B\\\\n\"", 
                            "python": "(\"B\\n\" , \"\")[ value ]"
                        }
                    }, 
                    "horizontal_margins": {
                        "prompt": "Horizontal margins (M)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "1.65"
                        ], 
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"M\\\\n$value\\\\n$vertical_margins\\\\n\" : \"\"", 
                            "python": "(\"\" , \"M\\n\" + str( value ) + \"\\n\" + str( vertical_margins ) + \"\\n\")[ value is not None and value != vdef ]"
                        }
                    }, 
                    "vertical_margins": {
                        "prompt": "Vertical margins", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "2.16"
                        ], 
                        "format": {
                            "perl": "\"\"", 
                            "python": "\"\""
                        }
                    }, 
                    "scale": {
                        "prompt": "Scale of branch length (R)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "format": {
                            "perl": "(defined $value) ? \"R\\\\n$value\\\\n\" : \"\"", 
                            "python": "(\"\" , \"R\\n\" +str( value ) +\"\\n\")[ value is not None ]"
                        }, 
                        "comment": "<text lang=\"en\">Default value: Automatically rescaled</text> </comment>"
                    }, 
                    "depth": {
                        "prompt": "Depth/Breadth of tree (D)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "1.00"
                        ], 
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"D\\\\n$value\\\\n\" : \"\"", 
                            "python": "( \"\" , \"D\\n\" + str( value ) + \"\\n\" )[ value is not None and value != vdef ]"
                        }
                    }, 
                    "stem": {
                        "prompt": "Stem-length/tree-depth (T)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "0.05"
                        ], 
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"T\\\\n$value\\\\n\" : \"\"", 
                            "python": "(\"\" , \"T\\n\" + str( value ) + \"\\n\")[ value is not None and value != vdef ]"
                        }, 
                        "ctrl": {
                            "perl": " 1.0", 
                            "python": " 1.0"
                        }, 
                        "comment": "<text lang=\"en\">Enter the stem length as fraction of tree depth (a value between 0.0 and 1.0).</text> </comment>"
                    }, 
                    "character_height": {
                        "prompt": "Character ht / tip space (C)", 
                        "type": {
                            "datatype_class": "Float"
                        }, 
                        "default_value": [
                            "0.3333"
                        ], 
                        "format": {
                            "perl": "(defined $value and $value != $vdef) ? \"C\\\\n$value\\\\n\" : \"\"", 
                            "python": "(\"\" , \"C\\n\" + str( value ) +\"\\n\")[ value is not None and value != vdef ]"
                        }, 
                        "comment": "<text lang=\"en\">Enter character height as fraction of tip spacing.</text> </comment>"
                    }, 
                    "ancestral": {
                        "prompt": "Ancestral nodes (A)", 
                        "type": {
                            "datatype_class": "Choice"
                        }, 
                        "default_value": [
                            "I"
                        ], 
                        "authorized_values": [
                            {
                                "value": "I", 
                                "label": "Intermediate (I)"
                            }, 
                            {
                                "value": "W", 
                                "label": "Weighted (W)"
                            }, 
                            {
                                "value": "C", 
                                "label": "Centered (C)"
                            }, 
                            {
                                "value": "N", 
                                "label": "Inner (N)"
                            }, 
                            {
                                "value": "V", 
                                "label": "So tree is V-shaped (V)"
                            }
                        ], 
                        "format": {
                            "perl": "(defined $value and $value ne $vdef) ? \"A\\\\n$value\\\\n\" : \"\"", 
                            "python": "(\"\" , \"A\\n\" + str( value )+ \"\\n\")[ value is not None and value != vdef ]"
                        }
                    }
                }
            }, 
            "confirm": {
                "ishidden": true, 
                "type": {
                    "datatype_class": "String"
                }, 
                "format": {
                    "perl": "\"Y\\\\n\"", 
                    "python": "\"Y\\n\""
                }
            }
        }
    }, 
    "outputs": {
        "parameters": {
            "plotfile": {
                "isout": true, 
                "prompt": "Graphic tree file", 
                "type": {
                    "datatype_class": "Picture", 
                    "datatype_superclass": "Binary"
                }, 
                "precond": {
                    "perl": "$plotter !~ /^[LMWX]$/", 
                    "python": "plotter not in [ \"L\" , \"M\" , \"W\", \"X\" ]"
                }, 
                "filenames": {
                    "perl": "\"plotfile\"", 
                    "python": "\"plotfile\""
                }
            }, 
            "psfile": {
                "isout": true, 
                "prompt": "Graphic tree file ( postscript format )", 
                "type": {
                    "datatype_class": "PostScript", 
                    "datatype_superclass": "Binary"
                }, 
                "precond": {
                    "perl": "$plotter eq \"L\"", 
                    "python": "plotter == \"L\""
                }, 
                "format": {
                    "perl": " ln -s plotfile plotfile.ps\"", 
                    "python": " ln -s plotfile plotfile.ps\""
                }, 
                "filenames": {
                    "perl": "plotfile.ps", 
                    "python": "'plotfile.ps'"
                }
            }, 
            "pictfile": {
                "isout": true, 
                "prompt": "Graphic tree file ( pict format )", 
                "type": {
                    "datatype_class": "Picture", 
                    "datatype_superclass": "Binary"
                }, 
                "precond": {
                    "perl": "$plotter eq \"M\"", 
                    "python": "plotter == \"M\""
                }, 
                "format": {
                    "perl": " ln -s plotfile plotfile.pict\"", 
                    "python": " ln -s plotfile plotfile.pict\""
                }, 
                "filenames": {
                    "perl": "plotfile.pict", 
                    "python": "'plotfile.pict'"
                }
            }, 
            "xbmfile": {
                "isout": true, 
                "prompt": "Graphic tree file ( xbm format )", 
                "type": {
                    "datatype_class": "Picture", 
                    "datatype_superclass": "Binary"
                }, 
                "precond": {
                    "perl": "$plotter eq \"X\"", 
                    "python": "plotter == \"X\""
                }, 
                "format": {
                    "perl": " ln -s plotfile plotfile.xbm\"", 
                    "python": " ln -s plotfile plotfile.xbm\""
                }, 
                "filenames": {
                    "perl": "plotfile.xbm", 
                    "python": "'plotfile.xbm'"
                }
            }, 
            "bmpfile": {
                "isout": true, 
                "prompt": "Graphic tree file ( bmp format )", 
                "type": {
                    "datatype_class": "Picture", 
                    "datatype_superclass": "Binary"
                }, 
                "precond": {
                    "perl": "$plotter eq \"W\"", 
                    "python": "plotter == \"W\""
                }, 
                "format": {
                    "perl": " ln -s plotfile plotfile.bmp\"", 
                    "python": " ln -s plotfile plotfile.bmp\""
                }, 
                "filenames": {
                    "perl": "plotfile.bmp", 
                    "python": "'plotfile.bmp'"
                }
            }
        }
    }, 
    "comment": "<text lang=\"en\">DRAWGRAM interactively plots a cladogram- or phenogram-like rooted tree diagram, with many options including orientation of tree and branches, style of tree, label sizes and angles, tree depth, margin sizes, stem lengths, and placement of nodes in the tree. Particularly if you can use your computer to preview the plot, you can very effectively adjust the details of the plotting to get just the kind of plot you want.</text> </comment>"
}